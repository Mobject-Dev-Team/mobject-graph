<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="AnyAliasArrayBundleNode" Id="{0599fb0a-839d-0142-360c-c44057c99b5a}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK FINAL AnyAliasArrayBundleNode EXTENDS Node
VAR
	in : I_AliasDatatype;
	out : I_AliasDatatype;
	datatypeOperations : DatatypeOperations;
	selfMadeElements : Stack;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{8a473814-936e-0815-12e4-b9a42a136442}" />
    <Folder Name="Destructor" Id="{bfe3e268-bc23-0711-1d49-a47cd38f37d2}" />
    <Folder Name="Private" Id="{cec9b45a-78a4-0d45-1bc8-ae8119df451c}" />
    <Method Name="Clone" Id="{41511374-6568-0b5a-0f58-cf5d4acd9311}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Node
VAR
	pNode : POINTER TO AnyAliasArrayBundleNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(AnyAliasArrayBundleNode(AliasDatatype := in));
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureFor1DArray" Id="{0c0b733f-44bf-0eea-0c1c-90daba27b990}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ConfigureFor1DArray
VAR_INPUT
	array1D : I_ArrayDatatype_1D;
END_VAR
VAR
	lowerBound : DINT;
	upperBound : DINT;
	i : DINT;
	element : I_Datatype;
	elementClone : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT array1D.TryGetLowerBound(1, lowerBound) THEN
	RETURN;
END_IF

IF NOT array1D.TryGetUpperBound(1, upperBound) THEN
	RETURN;
END_IF

FOR i := lowerBound TO upperBound DO
	
	IF array1D.TryGetElementAsDatatypeByIndex(i, element) THEN
		elementClone := element.Clone();
		datatypeOperations.AddMemoryCopyOperation(elementClone, element);
		AddInput(Get1DIndexName(i), elementClone);
		selfMadeElements.Push(elementClone);
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureFor2DArray" Id="{ba3ec539-5130-09ff-2a1b-6323943a9b54}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ConfigureFor2DArray
VAR_INPUT
	array2D : I_ArrayDatatype_2D;
END_VAR
VAR
	lowerBoundD1 : DINT;
	upperBoundD1 : DINT;
	lowerBoundD2 : DINT;
	upperBoundD2 : DINT;
	i, j : DINT;
	element : I_Datatype;
	elementClone : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT array2D.TryGetLowerBound(1, lowerBoundD1) THEN
	RETURN;
END_IF

IF NOT array2D.TryGetUpperBound(1, upperBoundD1) THEN
	RETURN;
END_IF

IF NOT array2D.TryGetLowerBound(2, lowerBoundD2) THEN
	RETURN;
END_IF

IF NOT array2D.TryGetUpperBound(2, upperBoundD2) THEN
	RETURN;
END_IF

FOR i := lowerBoundD1 TO upperBoundD1 DO
	FOR j := lowerBoundD2 TO upperBoundD2 DO
	
		IF array2D.TryGetElementAsDatatypeByIndex(i, j, element) THEN
			elementClone := element.Clone();
			datatypeOperations.AddMemoryCopyOperation(elementClone, element);
			AddInput(Get2DIndexName(i,j), elementClone);
			selfMadeElements.Push(elementClone);
		END_IF
	
	END_FOR
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureFor3DArray" Id="{78ddffc6-6c94-0846-38f7-a3a55e434f0f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ConfigureFor3DArray
VAR_INPUT
	array3D : I_ArrayDatatype_3D;
END_VAR
VAR
	lowerBoundD1 : DINT;
	upperBoundD1 : DINT;
	lowerBoundD2 : DINT;
	upperBoundD2 : DINT;
	lowerBoundD3 : DINT;
	upperBoundD3 : DINT;
	i, j, k : DINT;
	element : I_Datatype;
	elementClone : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT array3D.TryGetLowerBound(1, lowerBoundD1) THEN
	RETURN;
END_IF

IF NOT array3D.TryGetUpperBound(1, upperBoundD1) THEN
	RETURN;
END_IF

IF NOT array3D.TryGetLowerBound(2, lowerBoundD2) THEN
	RETURN;
END_IF

IF NOT array3D.TryGetUpperBound(2, upperBoundD2) THEN
	RETURN;
END_IF

IF NOT array3D.TryGetLowerBound(3, lowerBoundD3) THEN
	RETURN;
END_IF

IF NOT array3D.TryGetUpperBound(3, upperBoundD3) THEN
	RETURN;
END_IF

FOR i := lowerBoundD1 TO upperBoundD1 DO
	FOR j := lowerBoundD2 TO upperBoundD2 DO
		FOR k := lowerBoundD3 TO upperBoundD3 DO
	
			IF array3D.TryGetElementAsDatatypeByIndex(i, j, k, element) THEN
				elementClone := element.Clone();
				datatypeOperations.AddMemoryCopyOperation(elementClone, element);
				AddInput(Get3DIndexName(i, j, k), elementClone);
				selfMadeElements.Push(elementClone);
			END_IF
			
		END_FOR
	END_FOR
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{680969ca-4412-0aed-2889-e0c2c2a930e0}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
	element : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

in.Dispose();
out.Dispose();
datatypeOperations.Clear();

WHILE selfMadeElements.TryPop(element) DO
	IF element <> 0 THEN 
		element.Dispose();
	END_IF
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{01c2d675-d4c8-083c-2009-76110152f2db}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	AliasDatatype : I_AliasDatatype;
END_VAR
VAR
	inAsArray : I_ArrayDatatype;
	inAs1D : I_ArrayDatatype_1D;
	inAs2D : I_ArrayDatatype_2D;
	inAs3D : I_ArrayDatatype_3D;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AliasDatatype.Clone().TryResolveAsAliasDatatype(out);
AddOutput('out', out);

AliasDatatype.Clone().TryResolveAsAliasDatatype(in);
in.Root.TryResolveAsArrayDatatype(inAsArray);

IF inAsArray.TryResolveAs1DArrayDatatype(inAs1D) THEN
	ConfigureFor1DArray(inAs1D);
ELSIF inAsArray.TryResolveAs2DArrayDatatype(inAs2D) THEN
	ConfigureFor2DArray(inAs2D);
ELSIF inAsArray.TryResolveAs3DArrayDatatype(inAs3D) THEN
	ConfigureFor3DArray(inAs3D);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get1DIndexName" Id="{fbdc6f63-8ea9-0a68-085c-36c38f310d53}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE Get1DIndexName : T_MAXSTRING
VAR_INPUT
	Index : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get1DIndexName := concat('[', DINT_TO_STRING(Index));
Get1DIndexName := concat(Get1DIndexName, ']');]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get2DIndexName" Id="{5ef51d41-a76d-0a1b-19f3-20d0e7aa56ce}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE Get2DIndexName : T_MAXSTRING
VAR_INPUT
	Index1 : DINT;
	Index2 : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get2DIndexName := concat('[', DINT_TO_STRING(Index1));
Get2DIndexName := concat(Get2DIndexName, ',');
Get2DIndexName := concat(Get2DIndexName, DINT_TO_STRING(Index2));
Get2DIndexName := concat(Get2DIndexName, ']');]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get3DIndexName" Id="{e5bd7ac0-0aad-0a79-2692-595ca70d1440}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE Get3DIndexName : T_MAXSTRING
VAR_INPUT
	Index1 : DINT;
	Index2 : DINT;
	Index3 : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get3DIndexName := concat('[',DINT_TO_STRING(Index1));
Get3DIndexName := concat(Get3DIndexName,',');
Get3DIndexName := concat(Get3DIndexName,DINT_TO_STRING(Index2));
Get3DIndexName := concat(Get3DIndexName,',');
Get3DIndexName := concat(Get3DIndexName,DINT_TO_STRING(Index3));
Get3DIndexName := concat(Get3DIndexName,']');]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{0d6719f1-b6cb-0717-0338-c69a98ec13c8}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute : HRESULT
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[datatypeOperations.Execute();
memcpy(out.Address, in.Address, in.Size);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>