<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="AnyAliasStructureUnbundleNode" Id="{14b0fac4-6f1d-0af0-3ba5-7fbf94351200}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK FINAL AnyAliasStructureUnbundleNode EXTENDS Node
VAR
	in : I_AliasDatatype;
	out : I_AliasDatatype;
	datatypeOperations : DatatypeOperations;
	selfMadeMembers : Stack;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{f88d30a5-958f-0494-34ce-ebdf704d282c}" />
    <Folder Name="Destructor" Id="{6430d58c-0f6f-0768-1b0b-b628e060cb79}" />
    <Method Name="Clone" Id="{bbe07c1e-19c0-0dee-3611-506264ca8083}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Node
VAR
	pNode : POINTER TO AnyAliasStructureUnbundleNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(AnyAliasStructureUnbundleNode(AliasDatatype := in));
Clone := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{d489d4dd-7edb-0305-22b0-7b31bf4dfd33}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
	member : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

in.Dispose();
out.Dispose();
datatypeOperations.Clear();

WHILE selfMadeMembers.TryPop(member) DO
	IF member <> 0 THEN 
		member.dispose();
	END_IF
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7d82283e-623b-0ba4-0906-af5cbcfd2357}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	AliasDatatype : I_AliasDatatype;
END_VAR
VAR
	outAsStructure : I_StructuredDatatype;
	enumerator : I_KeyValueForwardEnumerator;
	member : I_Datatype;
	memberAsBit : I_BitDatatype;
	memberAsBool : I_Datatype;
	_bool : Pointer to _BOOL;
	memberClone : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AliasDatatype.Clone().TryResolveAsAliasDatatype(in);
AddInput('in', in);

AliasDatatype.Clone().TryResolveAsAliasDatatype(out);
out.Root.TryResolveAsStructuredDatatype(outAsStructure);
enumerator := outAsStructure.Members.GetMemberEnumerator();

WHILE enumerator.MoveNext() DO 
	IF enumerator.TryGet(member) THEN
		IF member.TryResolveAsBitDatatype(memberAsBit) THEN
			// if the element is a _bit then this needs to be treated differently (as you cannot simply memcpy
			// a bit, as it sits next to other data. Instead, a bool is added in it's place.	
			_bool := __NEW(_BOOL(InitialValue := memberAsBit.Value));
			datatypeOperations.AddWriteBitToBoolOperation(memberAsBit, _bool^);
			AddOutput(enumerator.Key, _bool^);
			memberAsBool := _bool^;
			selfMadeMembers.Push(memberAsBool);
		ELSE
			// for all other datatypes,
			memberClone := member.Clone();
			datatypeOperations.AddMemoryCopyOperation(member, memberClone);
			AddOutput(enumerator.key, memberClone);
			selfMadeMembers.Push(memberClone);
		END_IF		
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{1325c0b8-f042-002e-0c73-8cc409a3a386}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[memcpy(out.Address, in.Address, in.Size);
datatypeOperations.Execute();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>