<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="InputPort_ANY" Id="{8a76cd64-8399-006f-0213-1bb5b2341bca}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this FB directly'}{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK InputPort_ANY EXTENDS Disposable IMPLEMENTS I_InputPort
VAR
	_name : T_MAXSTRING;
	_permittedDataTypes : T_MAXSTRING;
	_connectedTo : I_OutputPort;
	internalBuffer : POINTER TO BYTE;
	internalBufferSize : UDINT;
	eventEmitter : EventEmitter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{c02273f4-e8fc-0d09-3c19-79f73fa57a1b}" />
    <Folder Name="Destructor" Id="{ba2ea5f2-36a9-0932-19c7-fcbc4ffe5fb3}" />
    <Folder Name="Private" Id="{1f1fa75f-3537-0229-2498-8638fd4c140f}" />
    <Method Name="Accept" Id="{1625d170-79e2-014d-2c2b-8ace06c47aa1}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_InputPortVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitInputPort(this^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckSourceDataTypeIsAllowed" Id="{cf78df18-286c-090f-1ebf-1b4924ebafa2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CheckSourceDataTypeIsAllowed : BOOL
VAR_INPUT
	Source : I_OutputPort;
END_VAR
VAR
	searchString : T_MAXSTRING;
	leftString : T_MAXSTRING;
	rightString : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF PermittedDataTypes = '' THEN 
	CheckSourceDataTypeIsAllowed := TRUE;
	RETURN;;
END_IF

IF PermittedDataTypes = Source.DataType THEN 	
	CheckSourceDataTypeIsAllowed := TRUE;
	RETURN;
END_IF

searchString := PermittedDataTypes;

WHILE findAndSplitChar(sSeparatorChar := ',', pSrcString := ADR(searchString), pLeftString := ADR(leftString), nLeftSize := SIZEOF(leftString), pRightString := ADR(rightString), nRightSize := SIZEOF(rightString), bSearchFromRight := FALSE) DO 

	IF leftString = Source.DataType OR rightString = Source.DataType THEN 	
		CheckSourceDataTypeIsAllowed := TRUE;
		RETURN;
	END_IF
	
	searchString := rightString;

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConnectTo" Id="{cf2a22c3-c119-0919-3767-3381d146e55b}">
      <Declaration><![CDATA[METHOD PUBLIC ConnectTo
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT CheckSourceDataTypeIsAllowed(OutputPort) THEN
	RETURN;
END_IF

OutputPort.OnEvent('OnOutputPortChanged', THIS^);
_connectedTo := OutputPort;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopyInternalBufferToDestination" Id="{d780866f-a8a9-0d8b-14ce-acf2a3dc97e8}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CopyInternalBufferToDestination
VAR_INPUT
	DestinationAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memcpy(DestinationAddress,internalBuffer,internalBufferSize);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopySourceToInternalBuffer" Id="{ecd1f6d6-3198-0f94-3d6b-8138401f05d7}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CopySourceToInternalBuffer
VAR_INPUT
	SourceAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memcpy(internalBuffer,SourceAddress,internalBufferSize);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="DataSize" Id="{3d8fffe6-ccba-0ff2-0252-789287dd2651}">
      <Declaration><![CDATA[PROPERTY PUBLIC DataSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{9b02a0ef-8be9-0d14-1f38-bd3f727f753d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF internalBuffer = 0 THEN
	RETURN;
END_IF

DataSize := internalBufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DataType" Id="{f697d0c9-35bd-003b-2eed-d1db3a1aaa7d}">
      <Declaration><![CDATA[PROPERTY PUBLIC DataType : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{9027c130-d714-0b66-2e0c-fed40c3b84cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT IsConnected THEN 
	RETURN;
END_IF

DataType := _connectedTo.DataType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DeleteInternalBuffer" Id="{099abdf9-5e01-0ce5-1920-94b1d39942de}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DeleteInternalBuffer
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF internalBuffer <> 0 THEN
	__DELETE(internalBuffer);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disconnect" Id="{2d2d97fa-faba-033e-23df-3b334614454b}">
      <Declaration><![CDATA[METHOD PUBLIC Disconnect]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _connectedTo = 0 THEN
	RETURN;
END_IF

_connectedTo.OffEvent('OnOutputPortChanged', THIS^);
_connectedTo := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnInputPortChangeEvent" Id="{c9ad38c0-e6a0-080d-0291-a5f6bdd88e5d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitOnInputPortChangeEvent
VAR_INPUT
	PortChanged : I_InputPort;
END_VAR
VAR
	pInputPortChangeEvent : POINTER TO InputPortChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pInputPortChangeEvent := __NEW(InputPortChangedEvent(TargetInputPort := PortChanged));
eventEmitter.Emit('OnInputPortChanged',pInputPortChangeEvent^);
pInputPortChangeEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{5bbffd23-4d4b-08bd-2200-a37d8613dfbf}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DeleteInternalBuffer();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{85cb6971-3869-03dd-0362-0b78635177f7}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Name : T_MAXSTRING;
	PermittedDataTypes : T_MAXSTRING;
	Parent : I_HaveInputPorts;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_name := Name;
_permittedDataTypes := PermittedDataTypes;

IF Parent = 0 THEN
	RETURN;
END_IF

Parent.AddInputPort(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{f813caa3-f9f5-0763-25b7-95603e18c9c7}">
      <Declaration><![CDATA[METHOD PUBLIC Get
VAR_INPUT
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetTo(Value.pValue, DINT_TO_UDINT(Value.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTo" Id="{6cdee704-352c-0268-1a5b-c9cf7fee8290}">
      <Declaration><![CDATA[METHOD PUBLIC GetTo
VAR_INPUT
	Destination : PVOID;
	DestinationSize : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsInternalBufferSameSizeAs(DestinationSize) THEN
	RETURN;
END_IF

CopyInternalBufferToDestination(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleEvent" Id="{a301251b-128e-042e-2c82-4ee90daa8459}">
      <Declaration><![CDATA[METHOD PUBLIC HandleEvent
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	outputPortChangedEvent : I_OutputPortChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(Event, outputPortChangedEvent) THEN
	HandleOutputPortChangedEvent(outputPortChangedEvent.TargetOutputPort);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleOutputPortChangedEvent" Id="{9bdbd293-4e3d-0e2f-0079-1e62c2ac0372}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC HandleOutputPortChangedEvent
VAR_INPUT
	Source : I_OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeleteInternalBuffer();

IF NOT CheckSourceDataTypeIsAllowed(Source) THEN
	RETURN;
END_IF

MakeInternalBufferOfSize(Source.DataSize);
Source.GetTo(internalBuffer,internalBufferSize);

EmitOnInputPortChangeEvent(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasData" Id="{028c08e7-27ab-0342-09cc-9dbc235ca19c}">
      <Declaration><![CDATA[PROPERTY HasData : BOOL]]></Declaration>
      <Get Name="Get" Id="{18f5535a-a48c-01cf-11dc-2957e3d7d564}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT IsConnected THEN 
	RETURN;
END_IF

HasData := _connectedTo.HasData;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsConnected" Id="{0eeca197-140f-0917-0914-20aa772b83ae}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsConnected : BOOL]]></Declaration>
      <Get Name="Get" Id="{7caf9676-d732-0ed2-375f-00350fceb01e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsConnected := _connectedTo <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsInternalBufferSameSizeAs" Id="{4b5eee94-77e1-0a27-1a14-11203e2f0f97}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsInternalBufferSameSizeAs : BOOL
VAR_INPUT
	Size : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF internalBuffer = 0 THEN
	RETURN;
END_IF

IF internalBufferSize <> Size THEN
	RETURN;
END_IF

IsInternalBufferSameSizeAs := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeInternalBufferOfSize" Id="{1e9e66b3-85ba-06d2-3b40-d013d15273d1}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE MakeInternalBufferOfSize
VAR_INPUT
	Size : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[internalBufferSize := Size;
internalBuffer := __NEW(BYTE, internalBufferSize);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{bed621d8-5fb5-029d-2ec1-72a1805573da}">
      <Declaration><![CDATA[PROPERTY PUBLIC Name : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{81e0229a-69c1-0712-0a6c-c9c3a3d10c8f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := _name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{8831601f-10ed-0308-0255-7aeb488c0bb1}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{02751623-dd18-0013-0361-602d9e5793b3}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{6400660c-9990-0d44-03fa-8885dfec75cf}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Property Name="PermittedDataTypes" Id="{756bbe97-8ed1-003d-213d-e72af1469808}">
      <Declaration><![CDATA[PROPERTY PUBLIC PermittedDataTypes : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{cd1c0acd-4bfd-0274-050d-5fc5fc240ae1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PermittedDataTypes := _permittedDataTypes;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Set" Id="{11bb708a-c074-063b-3b6f-6f91adf498fb}">
      <Declaration><![CDATA[METHOD PUBLIC Set
VAR_INPUT
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetFrom(Value.pValue, DINT_TO_UDINT(Value.diSize));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetFrom" Id="{a0fdb2f8-cbff-0fe3-1955-a0d3bea340b0}">
      <Declaration><![CDATA[METHOD PUBLIC SetFrom
VAR_INPUT
	SourceAddress : PVOID;
	SourceSize : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeleteInternalBuffer();
MakeInternalBufferOfSize(SourceSize);
CopySourceToInternalBuffer(SourceAddress);
EmitOnInputPortChangeEvent(this^);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>