<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="NodePrototypes" Id="{3a71411c-013f-04b4-2fdb-abd75ba10395}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK NodePrototypes IMPLEMENTS I_NodePrototypes
VAR
	nodePrototypes : Dictionary;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Accept" Id="{513e8062-8019-4c39-a286-8ae6858476b0}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_NodePrototypeVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNodePrototypeEnumerator" Id="{1d4ac568-ec5c-4a21-9cac-263e5e847698}">
      <Declaration><![CDATA[METHOD PUBLIC GetNodePrototypeEnumerator : I_NodePrototypeEnumerator
VAR_INPUT
END_VAR
VAR
	keyValueEnumerator : I_KeyValueForwardEnumerator;
	pNodePrototypeEnumerator : POINTER TO NodePrototypeEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[keyValueEnumerator := nodePrototypes.GetKeyValueEnumerator();

pNodePrototypeEnumerator := __NEW(NodePrototypeEnumerator(Enumerator := keyValueEnumerator));
GetNodePrototypeEnumerator := pNodePrototypeEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InstallNodePack" Id="{0ec00c43-b35f-0669-2893-bc57927b1baa}">
      <Declaration><![CDATA[METHOD PUBLIC InstallNodePack
VAR_INPUT
	NodePack : I_NodePack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[NodePack.RegisterWithNodePrototypes(This^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterNodeByType" Id="{4d3a5f0c-8074-09fb-2906-a4aa05ab5434}">
      <Declaration><![CDATA[METHOD PUBLIC RegisterNodeByType
VAR_INPUT
	NodeType : T_MAXSTRING;
	NodePrototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodePrototypes.AddOrUpdate(NodeType, NodePrototype);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{f25de65d-af0a-443e-a337-1981688bbf8a}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	types : I_Collection;
	enumerator : I_ForwardEnumerator;
	typeName : T_MAXSTRING;
	nodePrototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartArray();

types := nodePrototypes.GetKeys();
enumerator := types.GetEnumerator();

WHILE enumerator.MoveNext() DO
	
	IF NOT enumerator.TryGet(typeName) THEN
		CONTINUE;
	END_IF
	
	IF NOT nodePrototypes.TryGetValue(typeName, nodePrototype) THEN
		CONTINUE;
	END_IF
	
	Serializer.StartObject();
	Serializer.addkey(typeName);
	nodePrototype.SerializeWith(Serializer);
	Serializer.EndObject();
	
END_WHILE

enumerator.Dispose();
types.Dispose();

Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCreateNodeByType" Id="{ceb4bb2e-8751-4cf7-92a9-b7b5faf2cfa2}">
      <Declaration><![CDATA[METHOD PUBLIC TryCreateNodeByType : BOOL
VAR_INPUT
	NodeType : T_MAXSTRING;
	Destination : REFERENCE TO I_Node;
END_VAR
VAR
	nodePrototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT nodePrototypes.TryGetValue(NodeType,nodePrototype) THEN
	RETURN;
END_IF

Destination := nodePrototype.Clone();
TryCreateNodeByType := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>