<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="NodePrototypeHost" Id="{0f3611b8-dc13-4989-9cc7-2b1a9dfa6a1b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK NodePrototypeHost IMPLEMENTS I_NodePrototypes
VAR
	prototypes : Dictionary;
	selfCreatedPrototypes : Stack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{11dfafd7-bfe1-4ac3-b221-2441d3673444}" />
    <Folder Name="Private" Id="{f55cef08-2c4e-47c7-9688-2ca2e8391e35}" />
    <Method Name="Accept" Id="{619b7ec2-3516-4862-b7fa-24a77dbc583a}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	visitor : I_NodePrototypeVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	nodePrototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := prototypes.GetEnumerator();

WHILE enumerator.MoveNext() DO
	
	IF enumerator.TryGet(nodePrototype) THEN
		nodePrototype.Accept(Visitor);
	END_IF

END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeAsPrototype" Id="{d6c829d7-eddc-47ad-bb68-526a309f1a6f}">
      <Declaration><![CDATA[METHOD AddNodeAsPrototype : I_NodePrototype
VAR_INPUT
	Path : T_MAXSTRING;
	Node : I_Node;
END_VAR
VAR
	prototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[prototype := CreatePrototype(Path, Node);
selfCreatedPrototypes.Push(prototype);
AddNodePrototype(prototype);
AddNodeAsPrototype := prototype;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodePrototype" Id="{4d3a5f0c-8074-09fb-2906-a4aa05ab5434}">
      <Declaration><![CDATA[METHOD PUBLIC AddNodePrototype
VAR_INPUT
	NodePrototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[prototypes.AddOrUpdate(NodePrototype.Path, NodePrototype);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreatePrototype" Id="{70bb490a-583f-43d4-9a69-6aeef34a308f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreatePrototype : I_NodePrototype
VAR_INPUT
	PrototypePath : T_MAXSTRING;
	PrototypeNode : I_Node;
END_VAR
VAR
	pNodePrototype : POINTER TO NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodePrototype := __NEW(NodePrototype(Path := PrototypePath, Node := PrototypeNode));
CreatePrototype := pNodePrototype^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedNodePrototypes" Id="{5ecc01e1-ef32-49f4-a9de-419a17111555}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedNodePrototypes : BOOL
VAR
	prototype : I_NodePrototype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedPrototypes.TryPop(prototype) DO
	prototype.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{7b52281d-300e-4a1e-be0b-45b74272fbb0}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeSelfCreatedNodePrototypes();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetNodePrototypeByPath" Id="{1552adb8-7411-41b6-a91a-3b378262f86b}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetNodePrototypeByPath : BOOL
VAR_INPUT
	Path : T_MAXSTRING;
	Destination : REFERENCE TO I_NodePrototype;
END_VAR
VAR
	nodePrototype : I_NodePrototype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT prototypes.TryGetValue(Path, nodePrototype) THEN
	RETURN;
END_IF

Destination := nodePrototype;
TryGetNodePrototypeByPath := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>