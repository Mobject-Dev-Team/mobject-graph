<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MetadataHost" Id="{295616d7-5565-49b9-af5c-e97c4adf4dd9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK MetadataHost IMPLEMENTS I_Metadatum, I_Serializable
VAR
	hostParent : I_HostMetadata;
	eventTarget : I_EventTarget;
	meta : Dictionary;
	selfCreatedMetadata : Stack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{2cd2172d-d496-4e75-88f8-bbb91076b761}" />
    <Folder Name="Destructor" Id="{ace6407b-d6b5-40b6-bd6e-26eccbb7acdd}" />
    <Folder Name="Private" Id="{8bcdffd6-0965-4672-8190-613e7192fd8a}" />
    <Folder Name="Protected" Id="{f937d56f-843a-4125-9538-e699c052c10b}" />
    <Method Name="Accept" Id="{4f136a20-ea55-4a48-8ac4-da6446315411}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_MetadataVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := meta.GetEnumerator();

WHILE (enumerator.MoveNext()) DO
	
	IF enumerator.TryGet(metadata) THEN
		metadata.Accept(Visitor);
	END_IF

END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsMetadata" Id="{419b0d08-5077-40ba-afc0-9394e2a55d0e}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsMetadata : I_Metadata
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadata := CreateMetadata(Name, Data);
selfCreatedMetadata.Push(metadata);
AddDataAsMetadata := metadata;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMetadata" Id="{0d90bab2-dd82-458c-bba7-6e63399f607e}">
      <Declaration><![CDATA[METHOD PUBLIC AddMetadata
VAR_INPUT
	Metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[meta.AddOrUpdate(Metadata.Name, Metadata);
EmitOnMetadataAddedEvent(Metadata);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateMetadata" Id="{dac1e91a-2dc9-4124-9707-af54ff015a4b}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateMetadata : I_Metadata
VAR_INPUT
	MetadataName : T_MAXSTRING;
	MetadataData : I_Datatype;
END_VAR
VAR
	pMetadata : POINTER TO Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pMetadata := __NEW(Metadata(Name := MetadataName, Data := MetadataData, Parent := hostParent));
CreateMetadata := pMetadata^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedMetadata" Id="{b09d3046-4898-47e8-bb03-9190c0829ef0}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED DisposeSelfCreatedMetadata : BOOL
VAR
	metadata : I_Metadata;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedMetadata.TryPop(metadata) DO
	metadata.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnMetadataAddedEvent" Id="{0059e076-f3b1-427a-af15-5f96539d90af}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnMetadataAddedEvent
VAR_INPUT
	Metadata : I_Metadata;
END_VAR
VAR
	pMetadataAddedEvent : POINTER TO MetadataAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eventTarget = 0 THEN
	RETURN;
END_IF

pMetadataAddedEvent := __NEW(MetadataAddedEvent(Target := Metadata));
eventTarget.Emit('OnMetadataAdded',pMetadataAddedEvent^);
pMetadataAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{4cc33125-38d4-4959-8530-75b4229201cc}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeSelfCreatedMetadata();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{6cf9fc56-e79b-4e9c-bef0-b5526016bdf4}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : I_HostMetadata;
	ParentEventTarget : I_EventTarget;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hostParent := Parent;
eventTarget := ParentEventTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{3e51fd69-6bbd-4974-9a98-9fe16a6880bb}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF meta.Count = 0 THEN
	RETURN;
END_IF

Serializer.AddKey('metadata');
Serializer.StartArray();

enumerator := meta.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(metadata) THEN
		metadata.SerializeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();

Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetMetadataByName" Id="{f32a8f60-f093-4e79-843b-d57e6f12e3f2}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetMetadataByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Metadata;
END_VAR
VAR
	metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT meta.TryGetValue(Name, metadata) THEN
	RETURN;
END_IF

Destination := metadata;
TryGetMetadataByName := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>