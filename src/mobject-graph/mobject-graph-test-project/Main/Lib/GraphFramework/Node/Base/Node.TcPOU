<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Node" Id="{8b8910db-ad72-05a5-0556-4fd11e61a0b6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT Node EXTENDS Disposable IMPLEMENTS I_Node
VAR
	_id : T_MAXSTRING;
	_order : DINT;
	_mode : DINT;
	eventEmitter : EventEmitter;
	inputPortHost : InputPortHost(THIS^, eventEmitter);
	outputPortHost : OutputPortHost(THIS^, eventEmitter);
	parameterHost : ParameterHost(THIS^, eventEmitter);
	contentHost : ContentHost(THIS^, eventEmitter);
	alarmHost : AlarmHost(THIS^, eventEmitter);
	metadataHost : MetadataHost(THIS^, eventEmitter);
	extensionHost : ExtensionHost(THIS^,eventEmitter);
	deserializationFailedAlarm : DeserializationFailedAlarm(THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Abstract" Id="{dbd4d2fd-33d8-0c09-0e75-48a8aa9fa6b2}" />
    <Folder Name="Private" Id="{8ec16d65-8c65-4a95-b86c-ce0d7b115d7e}" />
    <Method Name="Accept" Id="{4230f410-f451-039d-2604-d2edaf4d13f7}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_NodeVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitNode(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Alarms" Id="{3b43eacd-84fc-4f31-84af-331f83c46038}">
      <Declaration><![CDATA[PROPERTY PUBLIC Alarms : I_Alarms]]></Declaration>
      <Get Name="Get" Id="{c0f42bf3-45e2-4d50-8a8d-795af7c4ec32}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Alarms := alarmHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clone" Id="{026c4113-8518-4d67-89a7-84bf1813f983}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PUBLIC ABSTRACT Clone : I_Node
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Contents" Id="{f653d4ef-9d84-4f61-9bb0-977307379411}">
      <Declaration><![CDATA[PROPERTY PUBLIC Contents : I_Contents]]></Declaration>
      <Get Name="Get" Id="{f2881c12-46ff-4e77-8eaa-620c32566948}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Contents := contentHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="EmitNodeExecuteBeginEvent" Id="{446e8833-be75-08b5-20ae-de0735b20b11}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitNodeExecuteBeginEvent : BOOL;
VAR
	pNodeExecuteBeginEvent : POINTER TO NodeExecuteBeginEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeExecuteBeginEvent := __NEW(NodeExecuteBeginEvent(Target := THIS^));
eventEmitter.Emit('OnNodeExecuteBegin',pNodeExecuteBeginEvent^);
pNodeExecuteBeginEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitNodeExecuteEndEvent" Id="{a7ad8910-3e19-0f65-0e88-7dce16ea71b6}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitNodeExecuteEndEvent : BOOL;
VAR
	pNodeExecuteEndEvent : POINTER TO NodeExecuteEndEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeExecuteEndEvent := __NEW(NodeExecuteEndEvent(Target := THIS^));
eventEmitter.Emit('OnNodeExecuteEnd',pNodeExecuteEndEvent^);
pNodeExecuteEndEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnNodePreExecuteEvent" Id="{78e8301b-1d71-0189-3c20-c1b779dc4500}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitOnNodePreExecuteEvent : BOOL;
VAR_INPUT
	CancelRequested : REFERENCE TO BOOL;
END_VAR
VAR
	pNodePreExecuteEvent : POINTER TO NodePreExecuteEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodePreExecuteEvent := __NEW(NodePreExecuteEvent(Target := THIS^));
eventEmitter.Emit('OnNodePreExecute',pNodePreExecuteEvent^);

IF pNodePreExecuteEvent^.ExecuteCancelled THEN
	CancelRequested := TRUE;
END_IF

pNodePreExecuteEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{d408825d-3e00-0ecb-23c4-0596c3d88698}">
      <Declaration><![CDATA[METHOD PUBLIC Execute
VAR
	cancelExecuteResponse : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[EmitOnNodePreExecuteEvent(cancelExecuteResponse);

IF cancelExecuteResponse THEN
	RETURN;
END_IF

EmitNodeExecuteBeginEvent();
OnExecute();
EmitNodeExecuteEndEvent();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Extensions" Id="{b0cbc392-7ab9-4d0a-800e-14cef51f010a}">
      <Declaration><![CDATA[PROPERTY PUBLIC Extensions : I_Extensions]]></Declaration>
      <Get Name="Get" Id="{149953d7-ea70-42c2-bd85-d5137271febf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Extensions := extensionHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HasRaisedAlarm" Id="{22345341-7d3f-4d62-a518-a9ca2b5c1250}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasRaisedAlarm : BOOL]]></Declaration>
      <Get Name="Get" Id="{5e835deb-b0f9-4cd7-8952-c0ace36b7516}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasRaisedAlarm := alarmHost.HasRaisedAlarm;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Id" Id="{83736b4e-b1bc-0adb-2e43-a65e1cb4d5a3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Id : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{e5d6cfcc-06b4-0c3a-347e-7067097be358}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Id := _id;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InputPorts" Id="{37d3fd5b-736f-4c56-98a2-d84e0d7d4f5e}">
      <Declaration><![CDATA[PROPERTY PUBLIC InputPorts : I_InputPorts]]></Declaration>
      <Get Name="Get" Id="{838903ab-1553-40bd-badc-97131512845f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InputPorts := inputPortHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Metadatum" Id="{3213d491-aef3-4b04-928b-7192fe0ecc67}">
      <Declaration><![CDATA[PROPERTY PUBLIC Metadatum : I_Metadatum]]></Declaration>
      <Get Name="Get" Id="{a2248a60-5344-4984-a941-c379877867d2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Metadatum := metadataHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Mode" Id="{7c0c904d-4b3b-026a-34c8-a61976b560fb}">
      <Declaration><![CDATA[PROPERTY PUBLIC Mode : DINT]]></Declaration>
      <Get Name="Get" Id="{e082d771-5c44-02f0-0e53-87177d47eeff}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := _mode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{31f72dc9-3d1e-4ce4-bd2f-cdb6bf6d0c73}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{4033b450-0033-49f9-8e3c-0af1c515fb9e}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{f228b5cc-83e5-4635-9fa1-3741721a5186}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{3305d23e-f58f-0290-011d-0ef3d43fdad1}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnExecute : HRESULT]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Order" Id="{b8b6cab5-3d18-0865-3a46-18681789df72}">
      <Declaration><![CDATA[PROPERTY PUBLIC Order : DINT]]></Declaration>
      <Get Name="Get" Id="{0242dc0d-dd4a-0656-266d-688e1d427b8a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Order := _order;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="OutputPorts" Id="{6ad67326-4a64-4212-98e1-2127c4719493}">
      <Declaration><![CDATA[PROPERTY PUBLIC OutputPorts : I_OutputPorts]]></Declaration>
      <Get Name="Get" Id="{983d1791-d2a1-425a-a774-eec6f4f45ef8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[OutputPorts := outputPortHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Parameters" Id="{a09fa6df-c38c-40a4-b4c5-33dc43d201cd}">
      <Declaration><![CDATA[PROPERTY PUBLIC Parameters : I_Parameters]]></Declaration>
      <Get Name="Get" Id="{1b79833f-7bd2-44d3-a48c-4151e3ed7609}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Parameters := parameterHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Self" Id="{434846d0-1e82-42de-ac2a-2f8bdb60d287}">
      <Declaration><![CDATA[PROPERTY PUBLIC Self : I_Node]]></Declaration>
      <Get Name="Get" Id="{38d16083-214b-4210-9499-7b3b433c5206}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Self := This^;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeWith" Id="{34e53c74-e83e-4449-a443-ad491ecc1661}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKeyString('id',_id);
Serializer.AddKeyDint('order',_order);
Serializer.AddKeyDint('mode',_mode);
inputPortHost.SerializeWith(Serializer);
outputPortHost.SerializeWith(Serializer);
parameterHost.SerializeWith(Serializer);
contentHost.SerializeWith(Serializer);
alarmHost.SerializeWith(Serializer);
extensionHost.SerializeWith(Serializer);
metadataHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{b10f689b-9a8b-4119-b4c9-ae83d038092d}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeserializationFailedAlarm.Clear();

IF NOT Deserializer.TryGetKeyString('id', _id, Feedback) THEN
	DeserializationFailedAlarm.Raise('Missing node id');	
	RETURN;
END_IF

IF NOT Deserializer.TryGetKeyDint('order', _order, Feedback) THEN
	DeserializationFailedAlarm.Raise('Missing node order');	
	RETURN;
END_IF

IF NOT Deserializer.TryGetKeyDint('mode', _mode, Feedback) THEN
	DeserializationFailedAlarm.Raise('Missing node mode');	
	RETURN;
END_IF

IF NOT parameterHost.TryDeserializeFrom(Deserializer, Feedback) THEN
	DeserializationFailedAlarm.Raise('Failed to deserialize parameters');	
	RETURN;
END_IF

IF NOT extensionHost.TryDeserializeFrom(Deserializer, Feedback) THEN
	DeserializationFailedAlarm.Raise('Failed to deserialize extensions');	
	RETURN;
END_IF

TryDeserializeFrom := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>