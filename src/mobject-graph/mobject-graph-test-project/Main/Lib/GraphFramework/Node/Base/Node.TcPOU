<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Node" Id="{8b8910db-ad72-05a5-0556-4fd11e61a0b6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT Node EXTENDS Disposable IMPLEMENTS I_Node
VAR
	_id : T_MAXSTRING;
	_order : DINT;
	_mode : DINT;
	eventEmitter : EventEmitter;
	inputPortHost : InputPortHost(eventEmitter);
	outputPortHost : OutputPortHost(eventEmitter);
	parameterHost : ParameterHost(eventEmitter);
	contentHost : ContentHost(eventEmitter);
	errorHost : ErrorHost(eventEmitter);
	extensionHost : ExtensionHost(eventEmitter);
	metadataHost : MetadataHost(eventEmitter);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Abstract" Id="{dbd4d2fd-33d8-0c09-0e75-48a8aa9fa6b2}" />
    <Folder Name="Constructor" Id="{a1653d54-8e94-41a9-8c14-cce7fd0b4618}" />
    <Folder Name="Protected" Id="{f0af3386-ca84-0b52-03e7-a20a015d9afb}" />
    <Method Name="Accept" Id="{4230f410-f451-039d-2604-d2edaf4d13f7}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_NodeVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitNode(this^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddContent" Id="{c0b648e0-1253-452b-90ed-e8143a2d89de}">
      <Declaration><![CDATA[METHOD AddContent
VAR_INPUT
	Content : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[contentHost.AddContent(Content);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsContent" Id="{892184f4-5f52-4626-821f-5a3491889bf3}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsContent : I_Content;
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddDataAsContent := contentHost.AddDataAsContent(Name, Data);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsInputPort" Id="{bf7b53bb-ee8c-454b-9fed-7549fb092389}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsInputPort : I_InputPort;
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddDataAsInputPort := inputPortHost.AddDataAsInputPort(Name, Data);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsMetadata" Id="{27de0cd1-b5b3-4c95-81d1-bae2f0aa4ba2}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsMetadata : I_Metadata;
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddDataAsMetadata := metadataHost.AddDataAsMetadata(Name, Data);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsOutputPort" Id="{67754854-46b8-493e-aa68-90f8cff784b2}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsOutputPort : I_OutputPort;
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddDataAsOutputPort := outputPortHost.AddDataAsOutputPort(Name, Data);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsParameter" Id="{369f41f2-8c43-4545-92b8-386c840b633c}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsParameter : I_Parameter;
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddDataAsParameter := parameterHost.AddDataAsParameter(Name, Data);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddError" Id="{68a33ee7-a8d2-4500-8be9-00fe1a233658}">
      <Declaration><![CDATA[METHOD AddError
VAR_INPUT
	Error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[errorHost.AddError(Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddExtension" Id="{3c2efc0a-31a2-4144-a0f8-6a9d285ba29e}">
      <Declaration><![CDATA[METHOD AddExtension
VAR_INPUT
	Extension : I_Extension;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensionHost.AddExtension(Extension);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddInputPort" Id="{f3d8ee87-5b7a-4f8c-afb8-98ced33fe48d}">
      <Declaration><![CDATA[METHOD AddInputPort
VAR_INPUT
	InputPort : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[inputPortHost.AddInputPort(InputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMetadata" Id="{0f29f336-eda4-437c-a7a8-83e334c02d43}">
      <Declaration><![CDATA[METHOD AddMetadata
VAR_INPUT
	Metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadataHost.AddMetadata(Metadata);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddOutputPort" Id="{baff6e52-981c-417b-a16e-c84e80784dd2}">
      <Declaration><![CDATA[METHOD AddOutputPort
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outputPortHost.AddOutputPort(OutputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddParameter" Id="{697d49dc-f6b8-4cfb-981a-457bda0c8dd7}">
      <Declaration><![CDATA[METHOD AddParameter
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameterHost.AddParameter(Parameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{026c4113-8518-4d67-89a7-84bf1813f983}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PUBLIC ABSTRACT Clone : I_Node
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitNodeExecuteBeginEvent" Id="{446e8833-be75-08b5-20ae-de0735b20b11}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitNodeExecuteBeginEvent : BOOL;
VAR
	pNodeExecuteBeginEvent : POINTER TO NodeExecuteBeginEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeExecuteBeginEvent := __NEW(NodeExecuteBeginEvent(TargetNode := THIS^));
eventEmitter.Emit('OnNodeExecuteBegin',pNodeExecuteBeginEvent^);
pNodeExecuteBeginEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitNodeExecuteEndEvent" Id="{a7ad8910-3e19-0f65-0e88-7dce16ea71b6}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitNodeExecuteEndEvent : BOOL;
VAR
	pNodeExecuteEndEvent : POINTER TO NodeExecuteEndEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeExecuteEndEvent := __NEW(NodeExecuteEndEvent(TargetNode := THIS^));
eventEmitter.Emit('OnNodeExecuteEnd',pNodeExecuteEndEvent^);
pNodeExecuteEndEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnNodePreExecuteEvent" Id="{78e8301b-1d71-0189-3c20-c1b779dc4500}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnNodePreExecuteEvent : BOOL;
VAR_INPUT
	CancelRequested : REFERENCE TO BOOL;
END_VAR
VAR
	pNodePreExecuteEvent : POINTER TO NodePreExecuteEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodePreExecuteEvent := __NEW(NodePreExecuteEvent(TargetNode := THIS^));
eventEmitter.Emit('OnNodePreExecute',pNodePreExecuteEvent^);

IF pNodePreExecuteEvent^.ExecuteCancelled THEN
	CancelRequested := TRUE;
END_IF

pNodePreExecuteEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{d408825d-3e00-0ecb-23c4-0596c3d88698}">
      <Declaration><![CDATA[METHOD PUBLIC Execute
VAR
	cancelExecuteResponse : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[EmitOnNodePreExecuteEvent(cancelExecuteResponse);

IF cancelExecuteResponse THEN
	RETURN;
END_IF

EmitNodeExecuteBeginEvent();
OnExecute();
EmitNodeExecuteEndEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f4087af8-03a6-4168-ab7f-e8de08c6cd17}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeNode(this^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Id" Id="{83736b4e-b1bc-0adb-2e43-a65e1cb4d5a3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Id : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{e5d6cfcc-06b4-0c3a-347e-7067097be358}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Id := _id;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="InitializeNode" Id="{01545b32-13d6-40b0-b942-2e82aaf63024}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED InitializeNode
VAR_INPUT
	Self : I_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Mode" Id="{7c0c904d-4b3b-026a-34c8-a61976b560fb}">
      <Declaration><![CDATA[PROPERTY PUBLIC Mode : DINT]]></Declaration>
      <Get Name="Get" Id="{e082d771-5c44-02f0-0e53-87177d47eeff}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := _mode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{31f72dc9-3d1e-4ce4-bd2f-cdb6bf6d0c73}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{4033b450-0033-49f9-8e3c-0af1c515fb9e}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{f228b5cc-83e5-4635-9fa1-3741721a5186}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{3305d23e-f58f-0290-011d-0ef3d43fdad1}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnExecute : HRESULT]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Order" Id="{b8b6cab5-3d18-0865-3a46-18681789df72}">
      <Declaration><![CDATA[PROPERTY PUBLIC Order : DINT]]></Declaration>
      <Get Name="Get" Id="{0242dc0d-dd4a-0656-266d-688e1d427b8a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Order := _order;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeWith" Id="{34e53c74-e83e-4449-a443-ad491ecc1661}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
inputPortHost.SerializeWith(Serializer);
outputPortHost.SerializeWith(Serializer);
parameterHost.SerializeWith(Serializer);
contentHost.SerializeWith(Serializer);
errorHost.SerializeWith(Serializer);
extensionHost.SerializeWith(Serializer);
metadataHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{b10f689b-9a8b-4119-b4c9-ae83d038092d}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := 
	Deserializer.TryGetKeyString('id', _id) AND
	Deserializer.TryGetKeyDint('order', _order) AND
	Deserializer.TryGetKeyDint('mode', _mode) AND
	parameterHost.TryDeserializeFrom(Deserializer) AND 
	extensionHost.TryDeserializeFrom(Deserializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetContentByName" Id="{a442af03-1b8f-4c53-817a-0af473a480df}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetContentByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Content;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	contentName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetContentByName := contentHost.TryGetContentByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
contentName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetContentByName := extension.TryGetContentByName(contentName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetExtensionByName" Id="{f31010b5-cd16-4ab4-8e30-e0b827c31eb1}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetExtensionByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetExtensionByName := extensionHost.TryGetExtensionByName(Name, Destination);
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetInputPortByName" Id="{97da5ea4-1784-4901-aa96-8e03ff2613bf}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetInputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_InputPort;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	portName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetInputPortByName := inputPortHost.TryGetInputPortByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
portName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetInputPortByName := extension.TryGetInputPortByName(portName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetMetadataByName" Id="{37dc25b0-8e02-4776-a290-bac7c8fa7609}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetMetadataByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Metadata;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	metadatumName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetMetadataByName := metadataHost.TryGetMetadataByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
metadatumName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetMetadataByName := extension.TryGetMetadataByName(metadatumName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetOutputPortByName" Id="{5e09a92c-9cf0-4b12-abd1-c4e11e5fff8d}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetOutputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_OutputPort;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	portName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetOutputPortByName := outputPortHost.TryGetOutputPortByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
portName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetOutputPortByName := extension.TryGetOutputPortByName(portName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetParameterByName" Id="{168c4d2c-f9f8-420d-bb40-e4bd5929ea86}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetParameterByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Parameter;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	parameterName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetParameterByName := parameterHost.TryGetParameterByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
parameterName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetParameterByName := extension.TryGetParameterByName(parameterName, Destination);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>