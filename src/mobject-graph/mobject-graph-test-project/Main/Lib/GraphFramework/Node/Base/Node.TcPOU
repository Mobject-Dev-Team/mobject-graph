<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Node" Id="{8b8910db-ad72-05a5-0556-4fd11e61a0b6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT Node EXTENDS Disposable IMPLEMENTS I_Node
VAR
	_id : T_MAXSTRING;
	_order : DINT;
	_mode : DINT;
	eventEmitter : EventEmitter;
	inputPortHost : InputPortHost(eventEmitter);
	outputPortHost : OutputPortHost(eventEmitter);
	parameterHost : ParameterHost(eventEmitter);
	contentHost : ContentHost(eventEmitter);
	errorHost : ErrorHost(eventEmitter);
	extensionHost : ExtensionHost(eventEmitter);
	metadataHost : MetadataHost(eventEmitter);
	selfCreatedContent : Stack;
	selfCreatedInputPorts : Stack;
	selfCreatedOutputPorts : Stack;
	selfCreatedParameters : Stack;
	selfCreatedMetadata : Stack;
	deserializationFailedError : DeserializationFailedError(THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Abstract" Id="{dbd4d2fd-33d8-0c09-0e75-48a8aa9fa6b2}" />
    <Folder Name="Constructor" Id="{a1653d54-8e94-41a9-8c14-cce7fd0b4618}" />
    <Folder Name="Destructor" Id="{2c9ac784-74b9-4332-8413-33f9ea278167}" />
    <Folder Name="Private" Id="{8ec16d65-8c65-4a95-b86c-ce0d7b115d7e}" />
    <Folder Name="Protected" Id="{f0af3386-ca84-0b52-03e7-a20a015d9afb}" />
    <Method Name="Accept" Id="{4230f410-f451-039d-2604-d2edaf4d13f7}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_NodeVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitNode(THIS^);
inputPortHost.Accept(Visitor);
outputPortHost.Accept(Visitor);
parameterHost.Accept(Visitor);
contentHost.Accept(Visitor);
errorHost.Accept(Visitor);
metadataHost.Accept(Visitor);
extensionHost.Accept(Visitor);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddContent" Id="{c0b648e0-1253-452b-90ed-e8143a2d89de}">
      <Declaration><![CDATA[METHOD AddContent
VAR_INPUT
	Content : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[contentHost.AddContent(Content);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsContent" Id="{72b00f64-399c-493e-9ab7-53deab7dc16a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsContent : I_Content
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	content : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[content := CreateContent(Name, Data);
selfCreatedContent.Push(content);
AddDataAsContent := content;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsInputPort" Id="{988e95dc-fbdb-469f-ba49-8e87d4c90e91}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsInputPort : I_InputPort
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	port : I_InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[port := CreateInputPort(Name, Data);
selfCreatedInputPorts.Push(port);
AddDataAsInputPort := port;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsMetadata" Id="{7f79a396-9377-4fa0-b2f1-236e8876e245}">
      <Declaration><![CDATA[METHOD PUBLIC AddDataAsMetadata : I_Metadata
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadata := CreateMetadata(Name, Data);
selfCreatedMetadata.Push(metadata);
AddDataAsMetadata := metadata;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsOutputPort" Id="{1afc1e8a-b521-4c43-8f46-6c4e8ff8a267}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsOutputPort : I_OutputPort
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	port : I_OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[port := CreateOutputPort(Name, Data);
selfCreatedOutputPorts.Push(port);
AddDataAsOutputPort := port;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsParameter" Id="{cc2ea30f-5d60-437d-9a59-4e87c271012d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsParameter : I_Parameter
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameter := CreateParameter(Name, Data);
selfCreatedParameters.Push(parameter);
AddDataAsParameter := parameter;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddError" Id="{68a33ee7-a8d2-4500-8be9-00fe1a233658}">
      <Declaration><![CDATA[METHOD AddError
VAR_INPUT
	Error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[errorHost.AddError(Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddExtension" Id="{3c2efc0a-31a2-4144-a0f8-6a9d285ba29e}">
      <Declaration><![CDATA[METHOD AddExtension
VAR_INPUT
	Extension : I_Extension;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensionHost.AddExtension(Extension);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddInputPort" Id="{f3d8ee87-5b7a-4f8c-afb8-98ced33fe48d}">
      <Declaration><![CDATA[METHOD AddInputPort
VAR_INPUT
	InputPort : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[inputPortHost.AddInputPort(InputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMetadata" Id="{0f29f336-eda4-437c-a7a8-83e334c02d43}">
      <Declaration><![CDATA[METHOD AddMetadata
VAR_INPUT
	Metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadataHost.AddMetadata(Metadata);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddOutputPort" Id="{baff6e52-981c-417b-a16e-c84e80784dd2}">
      <Declaration><![CDATA[METHOD AddOutputPort
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outputPortHost.AddOutputPort(OutputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddParameter" Id="{697d49dc-f6b8-4cfb-981a-457bda0c8dd7}">
      <Declaration><![CDATA[METHOD AddParameter
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameterHost.AddParameter(Parameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{026c4113-8518-4d67-89a7-84bf1813f983}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PUBLIC ABSTRACT Clone : I_Node
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateContent" Id="{1bf2211f-7042-4824-a41b-b52f1fa50610}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateContent : I_Content
VAR_INPUT
	ContentName : T_MAXSTRING;
	ContentData : I_Datatype;
END_VAR
VAR
	pContent : POINTER TO Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pContent := __NEW(Content(Name := ContentName, Data := ContentData, Parent := THIS^));
CreateContent := pContent^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateInputPort" Id="{47a0f189-9655-47f5-aaeb-d02a032d1ee4}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateInputPort : I_InputPort
VAR_INPUT
	PortName : T_MAXSTRING;
	PortData : I_Datatype;
END_VAR
VAR
	pPort : POINTER TO InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pPort := __NEW(InputPort(Name := PortName, Data := PortData, Parent := THIS^));
CreateInputPort := pPort^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateMetadata" Id="{9cb6f2d6-525a-4d98-b9a2-2df300e5a7cb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateMetadata : I_Metadata
VAR_INPUT
	MetadataName : T_MAXSTRING;
	MetadataData : I_Datatype;
END_VAR
VAR
	pMetadata : POINTER TO Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pMetadata := __NEW(Metadata(Name := MetadataName, Data := MetadataData, Parent := THIS^));
CreateMetadata := pMetadata^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateOutputPort" Id="{946b86f4-d919-451a-a899-9a012ab2dd19}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateOutputPort : I_OutputPort
VAR_INPUT
	PortName : T_MAXSTRING;
	PortData : I_Datatype;
END_VAR
VAR
	pPort : POINTER TO OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pPort := __NEW(OutputPort(Name := PortName, Data := PortData, Parent := THIS^));
CreateOutputPort := pPort^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateParameter" Id="{5e797fdd-3539-4ab9-897a-7acc07da8de9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateParameter : I_Parameter
VAR_INPUT
	ParameterName : T_MAXSTRING;
	ParameterData : I_Datatype;
END_VAR
VAR
	pParameter : POINTER TO Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pParameter := __NEW(Parameter(Name := ParameterName, Data := ParameterData, Parent := THIS^));
CreateParameter := pParameter^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedContent" Id="{443fefcd-474c-4185-9471-e35ed738110e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedContent : BOOL
VAR
	content : I_Content;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedContent.TryPop(content) DO
	content.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedInputPorts" Id="{3f75eb1f-4a84-42e7-87da-089940742dfb}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedInputPorts : BOOL
VAR
	port : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedInputPorts.TryPop(port) DO
	port.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedMetadata" Id="{329a9281-3d84-4016-9f08-40c4bd2bd63c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED DisposeSelfCreatedMetadata : BOOL
VAR
	metadata : I_Metadata;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedMetadata.TryPop(metadata) DO
	metadata.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedOutputPorts" Id="{c730ed2e-28cd-4dc4-94f1-17af30559e25}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedOutputPorts : BOOL
VAR
	port : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedOutputPorts.TryPop(port) DO
	port.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedParameters" Id="{9fc5c687-8466-4803-ba8d-bd4e514b0e8e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedParameters : BOOL
VAR
	parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedParameters.TryPop(parameter) DO
	parameter.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitNodeExecuteBeginEvent" Id="{446e8833-be75-08b5-20ae-de0735b20b11}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitNodeExecuteBeginEvent : BOOL;
VAR
	pNodeExecuteBeginEvent : POINTER TO NodeExecuteBeginEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeExecuteBeginEvent := __NEW(NodeExecuteBeginEvent(Target := THIS^));
eventEmitter.Emit('OnNodeExecuteBegin',pNodeExecuteBeginEvent^);
pNodeExecuteBeginEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitNodeExecuteEndEvent" Id="{a7ad8910-3e19-0f65-0e88-7dce16ea71b6}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitNodeExecuteEndEvent : BOOL;
VAR
	pNodeExecuteEndEvent : POINTER TO NodeExecuteEndEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodeExecuteEndEvent := __NEW(NodeExecuteEndEvent(Target := THIS^));
eventEmitter.Emit('OnNodeExecuteEnd',pNodeExecuteEndEvent^);
pNodeExecuteEndEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnNodePreExecuteEvent" Id="{78e8301b-1d71-0189-3c20-c1b779dc4500}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitOnNodePreExecuteEvent : BOOL;
VAR_INPUT
	CancelRequested : REFERENCE TO BOOL;
END_VAR
VAR
	pNodePreExecuteEvent : POINTER TO NodePreExecuteEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNodePreExecuteEvent := __NEW(NodePreExecuteEvent(Target := THIS^));
eventEmitter.Emit('OnNodePreExecute',pNodePreExecuteEvent^);

IF pNodePreExecuteEvent^.ExecuteCancelled THEN
	CancelRequested := TRUE;
END_IF

pNodePreExecuteEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{d408825d-3e00-0ecb-23c4-0596c3d88698}">
      <Declaration><![CDATA[METHOD PUBLIC Execute
VAR
	cancelExecuteResponse : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[EmitOnNodePreExecuteEvent(cancelExecuteResponse);

IF cancelExecuteResponse THEN
	RETURN;
END_IF

EmitNodeExecuteBeginEvent();
OnExecute();
EmitNodeExecuteEndEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{5c2bb896-8f98-4d7f-853c-da13e9566c86}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeSelfCreatedContent();
DisposeSelfCreatedInputPorts();
DisposeSelfCreatedOutputPorts();
DisposeSelfCreatedParameters();
DisposeSelfCreatedMetadata();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f4087af8-03a6-4168-ab7f-e8de08c6cd17}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize();]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasRaisedError" Id="{22345341-7d3f-4d62-a518-a9ca2b5c1250}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasRaisedError : BOOL]]></Declaration>
      <Get Name="Get" Id="{5e835deb-b0f9-4cd7-8952-c0ace36b7516}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasRaisedError := errorHost.HasRaisedError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Id" Id="{83736b4e-b1bc-0adb-2e43-a65e1cb4d5a3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Id : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{e5d6cfcc-06b4-0c3a-347e-7067097be358}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Id := _id;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialize" Id="{01545b32-13d6-40b0-b942-2e82aaf63024}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED Initialize
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Mode" Id="{7c0c904d-4b3b-026a-34c8-a61976b560fb}">
      <Declaration><![CDATA[PROPERTY PUBLIC Mode : DINT]]></Declaration>
      <Get Name="Get" Id="{e082d771-5c44-02f0-0e53-87177d47eeff}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := _mode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{31f72dc9-3d1e-4ce4-bd2f-cdb6bf6d0c73}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{4033b450-0033-49f9-8e3c-0af1c515fb9e}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{f228b5cc-83e5-4635-9fa1-3741721a5186}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{3305d23e-f58f-0290-011d-0ef3d43fdad1}" FolderPath="Abstract\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT OnExecute : HRESULT]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Order" Id="{b8b6cab5-3d18-0865-3a46-18681789df72}">
      <Declaration><![CDATA[PROPERTY PUBLIC Order : DINT]]></Declaration>
      <Get Name="Get" Id="{0242dc0d-dd4a-0656-266d-688e1d427b8a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Order := _order;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeWith" Id="{34e53c74-e83e-4449-a443-ad491ecc1661}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKeyString('id',_id);
Serializer.AddKeyDint('order',_order);
Serializer.AddKeyDint('mode',_mode);
inputPortHost.SerializeWith(Serializer);
outputPortHost.SerializeWith(Serializer);
parameterHost.SerializeWith(Serializer);
contentHost.SerializeWith(Serializer);
errorHost.SerializeWith(Serializer);
extensionHost.SerializeWith(Serializer);
metadataHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{b10f689b-9a8b-4119-b4c9-ae83d038092d}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Deserializer.TryGetKeyString('id', _id) THEN
	deserializationFailedError.Raise('Missing node id');	
	RETURN;
END_IF

Deserializer.TryGetKeyDint('order', _order);
Deserializer.TryGetKeyDint('mode', _mode);

IF NOT parameterHost.TryDeserializeFrom(Deserializer) THEN
	deserializationFailedError.Raise('Failed to deserialize parameters');	
	RETURN;
END_IF

IF NOT extensionHost.TryDeserializeFrom(Deserializer) THEN
	deserializationFailedError.Raise('Failed to deserialize extensions');	
	RETURN;
END_IF

deserializationFailedError.Clear();
TryDeserializeFrom := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetContentByName" Id="{e9949623-efee-4292-8ef1-a0dfa9763f58}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetContentByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Content;
END_VAR
VAR
	extensionNamespace : ExtensionNamespace(Name);
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT extensionNamespace.IsExtensionPath THEN
	TryGetContentByName := contentHost.TryGetContentByName(Name,Destination);
	RETURN;
END_IF

IF NOT TryGetExtensionByName(extensionNamespace.ExtensionName, extension) THEN
	RETURN;
END_IF

TryGetContentByName := extension.TryGetContentByName(extensionNamespace.TargetName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetExtensionByName" Id="{f31010b5-cd16-4ab4-8e30-e0b827c31eb1}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetExtensionByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetExtensionByName := extensionHost.TryGetExtensionByName(Name, Destination);
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetInputPortByName" Id="{9be4fe99-f9c6-4bfc-9668-d13bf0ca1cfb}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetInputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_InputPort;
END_VAR
VAR
	extensionNamespace : ExtensionNamespace(Name);
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT extensionNamespace.IsExtensionPath THEN
	TryGetInputPortByName := inputPortHost.TryGetInputPortByName(Name,Destination);
	RETURN;
END_IF

IF NOT TryGetExtensionByName(extensionNamespace.ExtensionName, extension) THEN
	RETURN;
END_IF

TryGetInputPortByName := extension.TryGetInputPortByName(extensionNamespace.TargetName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetMetadataByName" Id="{da24e785-ecaf-4933-9754-5f67eea3d131}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetMetadataByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetMetadataByName := metadatahost.TryGetMetadataByName(Name, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetOutputPortByName" Id="{bed6d2f7-3426-4499-b0ba-77d127469544}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetOutputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_OutputPort;
END_VAR
VAR
	extensionNamespace : ExtensionNamespace(Name);
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT extensionNamespace.IsExtensionPath THEN
	TryGetOutputPortByName := outputPortHost.TryGetOutputPortByName(Name,Destination);
	RETURN;
END_IF

IF NOT TryGetExtensionByName(extensionNamespace.ExtensionName, extension) THEN
	RETURN;
END_IF

TryGetOutputPortByName := extension.TryGetOutputPortByName(extensionNamespace.TargetName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetParameterByName" Id="{afe41fda-5526-4e29-bcae-5944d27de2f9}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetParameterByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Parameter;
END_VAR
VAR
	extensionNamespace : ExtensionNamespace(Name);
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT extensionNamespace.IsExtensionPath THEN
	TryGetParameterByName := parameterHost.TryGetParameterByName(Name,Destination);
	RETURN;
END_IF

IF NOT TryGetExtensionByName(extensionNamespace.ExtensionName, extension) THEN
	RETURN;
END_IF

TryGetParameterByName := extension.TryGetParameterByName(extensionNamespace.TargetName, Destination);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>