<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="OutOfRangeError" Id="{2ccd0e67-6ba3-0c6a-35dd-5bfd61fbd115}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC OutOfRangeError EXTENDS Error
VAR
	state : (CLEARED, RAISED_UNDERRANGE, RAISED_OVERRANGE, RAISED_ODD_NUMBER, RAISED_EVEN_NUMBER, RAISED_INCORRECT_SIZE, RAISED_MISMATCH);
	expectedValue : STRING;
	expectedType : __SYSTEM.TYPE_CLASS;
	actualValue : STRING;
	actualType : __SYSTEM.TYPE_CLASS;
	messageString : T_MaxString := 'Out of range error';
	parameterName : STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Active" Id="{b3ed1dd3-062c-0d14-2aa4-01c76a429927}">
      <Declaration><![CDATA[PROPERTY Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{b8ed329a-61e6-0299-3cd3-ed8bdea8932a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := state <> CLEARED;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{11ecd22d-ae9c-030f-28fe-178e2ba8af12}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[expectedValue := '';
actualValue := '';
parameterName := '';
state := CLEARED;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorCode" Id="{11a3ca23-def6-01b0-0f38-c771307eb374}">
      <Declaration><![CDATA[PROPERTY PUBLIC ErrorCode : HRESULT]]></Declaration>
      <Get Name="Get" Id="{f0bd81c9-b940-0259-1c19-a019bb070fc0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorCode := Tc2_System.E_HRESULTAdsErr.INVALIDSIZE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Message" Id="{f8ec81fa-b37e-0599-048a-1e74b1b8b788}">
      <Declaration><![CDATA[PROPERTY Message : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{44880487-3a4b-09b5-1f34-4e2522b3f559}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Message := messageString;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RaiseEvenNumber" Id="{277e8026-9f0b-0b5b-1bc9-0340cd94f4a8}">
      <Declaration><![CDATA[METHOD PUBLIC RaiseEvenNumber
VAR_INPUT
	Actual : ANY_NUM;
	ParameterName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[actualValue := AnyToString(Actual);
actualType := Actual.TypeClass;
THIS^.parameterName := ParameterName;
state := RAISED_EVEN_NUMBER;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseIncorrectSize" Id="{bc0e6470-8cbc-0d46-1e3d-42518f94239f}">
      <Declaration><![CDATA[METHOD PUBLIC RaiseIncorrectSize
VAR_INPUT
	ParameterName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.parameterName := ParameterName;
state := RAISED_INCORRECT_SIZE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseMismatch" Id="{5ee367eb-6fc3-0f6f-2c43-912d244a53f5}">
      <Declaration><![CDATA[METHOD PUBLIC RaiseMismatch
VAR_INPUT
	ParameterName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.parameterName := ParameterName;
state := RAISED_MISMATCH;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseOddNumber" Id="{5cce66fb-2777-0625-0458-4bbc0d007140}">
      <Declaration><![CDATA[METHOD PUBLIC RaiseOddNumber
VAR_INPUT
	Actual : ANY_NUM;
	ParameterName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[actualValue := AnyToString(Actual);
actualType := Actual.TypeClass;
THIS^.parameterName := ParameterName;
state := RAISED_ODD_NUMBER;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseOverrange" Id="{ac34498d-0732-01a3-1b61-48a1d637c157}">
      <Declaration><![CDATA[METHOD PUBLIC RaiseOverrange
VAR_INPUT
	Expected : ANY_NUM;
	Actual : ANY_NUM;
	ParameterName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[expectedValue := AnyToString(Expected);
expectedType := Expected.TypeClass;
actualValue := AnyToString(Actual);
actualType := Actual.TypeClass;
THIS^.parameterName := ParameterName;
state := RAISED_OVERRANGE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseUnderRange" Id="{642b695b-fba9-0a6a-0d85-ee861bdce96a}">
      <Declaration><![CDATA[METHOD PUBLIC RaiseUnderRange
VAR_INPUT
	Expected : ANY_NUM;
	Actual : ANY_NUM;
	ParameterName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[expectedValue := AnyToString(Expected);
expectedType := Expected.TypeClass;
actualValue := AnyToString(Actual);
actualType := Actual.TypeClass;
THIS^.parameterName := ParameterName;
state := RAISED_UNDERRANGE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Reason" Id="{24a06faa-d61b-059e-04f2-c8c22d6be279}">
      <Declaration><![CDATA[PROPERTY Reason : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{cd863b8a-3c3e-001a-035f-18f82111b772}">
        <Declaration><![CDATA[VAR
	message : STRING := '';
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF state = CLEARED THEN
	RETURN;
END_IF

IF parameterName <> '' THEN
	message := CONCAT(message, parameterName);
	message := CONCAT(message, ' ');
END_IF

CASE state OF
	RAISED_UNDERRANGE, RAISED_OVERRANGE :
		message := CONCAT(message, 'EXP: ');
		message := CONCAT(message, expectedValue);
		message := CONCAT(message, ', ACT: ');
		message := CONCAT(message, actualValue);
		
	RAISED_ODD_NUMBER :
		message := CONCAT(message, 'EXP: Even number');
		message := CONCAT(message, expectedValue);
		message := CONCAT(message, ', ACT: ');
		message := CONCAT(message, actualValue);
		
	RAISED_EVEN_NUMBER :
		message := CONCAT(message, 'EXP: Odd number');
		message := CONCAT(message, expectedValue);
		message := CONCAT(message, ', ACT: ');
		message := CONCAT(message, actualValue);
		
	RAISED_INCORRECT_SIZE :
		message := CONCAT(message, 'Incorrect size');
		
	RAISED_MISMATCH :
		message := CONCAT(message, 'Mismatch');
		
END_CASE

Reason := message;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>