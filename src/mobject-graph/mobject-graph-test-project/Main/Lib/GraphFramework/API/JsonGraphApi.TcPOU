<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonGraphApi" Id="{c1e33162-22a3-0a3c-077b-8b452ecb459b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK JsonGraphApi
VAR		

	{attribute 'hide'}
	graph : REFERENCE TO I_Graph;
	{attribute 'hide'}
	languagePack : I_GraphDatatypes;

	// incoming symbol
	receivedGraphJson : HugeString;
		
	// outgoing symbol
	graphStatus : HugeString := '{}';
	graphBlueprint : T_MAXSTRING := '{}';
	
	// local
	ton : TON;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{98ce9ec0-c25d-03d9-0d73-6763151d820f}" />
    <Method Name="CyclicCall" Id="{bedf68e5-fac3-0276-058a-616e34d0fbdc}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall
VAR_INPUT
END_VAR
VAR
	settingsParser : JsonGraphSettingsParser(languagePack);
	serializer : JsonSerializer;
	getStatusQuery : GetStatusVisitor(serializer);
	getBlueprintQuery : GetBlueprintVisitor(serializer);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check for updates and load json
IF receivedGraphJson <> '' THEN
	IF settingsParser.ReadString(receivedGraphJson) THEN
		graph.Configure(settingsParser);
	END_IF
	receivedGraphJson := '';
END_IF

// cyclically provide status updates
ton(in:=NOT ton.Q,pt:= T#500MS);
IF ton.Q THEN
	serializer.Reset();
	graph.Accept(getStatusQuery);
	serializer.TryGetSerialziedData(ADR(graphStatus),SIZEOF(graphStatus));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{40317e64-b2d3-02fb-24c7-6962bd8b3ec8}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Graph : REFERENCE TO I_Graph;
	LanguagePack : I_GraphDatatypes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.graph REF= Graph;
THIS^.languagePack := LanguagePack;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>