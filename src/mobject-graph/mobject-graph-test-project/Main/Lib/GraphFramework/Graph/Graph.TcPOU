<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Graph" Id="{bc650401-8298-0fc9-2fc1-27c637239109}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this FB directly'}{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Graph EXTENDS BaseElement IMPLEMENTS I_Graph
VAR
	nodePrototypes : I_NodePrototypes;
	linkFactory : I_LinkFactory;
	_uuid : T_MAXSTRING;	
	nodes : Nodes;
	links : Links;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{a293f140-7386-0971-1795-6d18ede4b434}" />
    <Folder Name="Destructor" Id="{b9a66c15-86af-0a69-1a53-9c709ccc1fa3}" />
    <Method Name="Accept" Id="{9759288d-5f0e-0b2c-0d87-315eec92f3c5}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_GraphVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitGraph(this^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{9dcfff24-3381-0760-25fd-bc1afba0c65f}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{dedf069a-1e51-0fed-0932-2607f7394698}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	NodePrototypes : I_NodePrototypes;
	LinkFactory : I_LinkFactory;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.nodePrototypes := NodePrototypes;
THIS^.linkFactory := LinkFactory;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNodes" Id="{06360e34-fba5-0320-1e31-5f26e23cab86}">
      <Declaration><![CDATA[METHOD PUBLIC GetNodes : I_Nodes
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetNodes := nodes;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{fa166676-0f3d-0fcb-3385-10008bb949c7}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[links.DisposeAndRemoveAll();
nodes.DisposeAll();

_uuid := '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{1dc36582-e7a3-03d2-2e77-7abd714e98fa}">
      <Declaration><![CDATA[METHOD Run
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodes.ExecuteInOrder();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{99b56a2a-8cdf-4ba7-9ff3-3103bd8e6be2}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	receivedUuid : T_MAXSTRING;
	nodeArrayEnumerator : I_DeserializerForwardEnumerator;
	nodeId : UDINT;
	nodeType : T_MAXSTRING;
	node : I_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Deserializer.TryGetKeyString('uuid', receivedUuid) THEN

	IF Uuid <> uuid THEN
		Reset();
	END_IF

END_IF

nodeArrayEnumerator := Deserializer.GetKeyArray('nodes').GetArrayElementEnumerator();

WHILE nodeArrayEnumerator.MoveNext() do
	
	IF NOT nodeArrayEnumerator.Current.TryGetKeyUdint('id',nodeId) THEN
		// raise error that a node was received without an id
		CONTINUE;
	END_IF
	
	IF NOT nodes.TryGetById(nodeId, node) THEN // no node available so make it...
		
		IF NOT nodeArrayEnumerator.Current.TryGetKeyString('type',nodeType) THEN
			// raise error that a node prototype was needed, but not available
			CONTINUE;
		END_IF
	
		IF NOT nodePrototypes.TryCreateByType(nodeType,node) THEN		
			// raise error that node prototypes didn't make the node
			CONTINUE;
		END_IF
		
	END_IF

	node.TryDeserializeFrom(nodeArrayEnumerator.Current);

END_WHILE

//linkCount:= GraphSettings.LinkCount;

//FOR linkIndex := 0 TO linkCount - 1  DO
	
//	linkSettings := GraphSettings.GetLinkByIndex(linkIndex);
	
//	nodeSettings := GraphSettings.GetNodeById(linkSettings.SourceId);
//	sourcePortName := nodeSettings.GetOutputById(linkSettings.SourcePortId).Name;
	
//	nodeSettings := GraphSettings.GetNodeById(linkSettings.DestinationId);
//	destinationPortName := nodeSettings.GetInputById(linkSettings.DestinationPortId).Name;
	 
//	link := linkFactory.Create(
//		linkId := linkSettings.Id,
//		linkSourceNode := nodes.TryGetById(linkSettings.SourceId),
//		linkSourcePortName := sourcePortName,
//		LinkDestinationNode := nodes.TryGetById(linkSettings.DestinationId),
//		LinkDestinationPortName := destinationPortName
//	);

//	link.Configure(linkSettings);
//	links.Insert(link);

//END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Uuid" Id="{cbe3c956-8695-4d9e-97b9-f984946d2dd4}">
      <Declaration><![CDATA[PROPERTY PUBLIC Uuid : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{37480370-f818-4d22-9ced-09196bcc4e7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Uuid := _uuid;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>