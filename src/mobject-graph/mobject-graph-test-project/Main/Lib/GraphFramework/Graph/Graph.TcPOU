<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Graph" Id="{bc650401-8298-0fc9-2fc1-27c637239109}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this FB directly'}{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Graph EXTENDS Disposable IMPLEMENTS I_Graph
VAR
	nodePrototypes : I_NodePrototypes;
	_uuid : T_MAXSTRING;	
	eventEmitter : EventEmitter;
	nodeHost : NodeHost(eventEmitter);
	inputPortHost : InputPortHost(eventEmitter);
	outputPortHost : OutputPortHost(eventEmitter);
	parameterHost : ParameterHost(eventEmitter);
	contentHost : ContentHost(eventEmitter);
	errorHost : ErrorHost(eventEmitter);
	extensionHost : ExtensionHost(eventEmitter);
	metadataHost : MetadataHost(eventEmitter);
	
	selfCreatedContent : Stack;
	selfCreatedInputPorts : Stack;
	selfCreatedOutputPorts : Stack;
	selfCreatedParameters : Stack;
	selfCreatedMetadata : Stack;
	selfCreatedNodes : Stack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{a293f140-7386-0971-1795-6d18ede4b434}" />
    <Folder Name="Destructor" Id="{b9a66c15-86af-0a69-1a53-9c709ccc1fa3}" />
    <Folder Name="Private" Id="{947f7633-9d50-4f4f-b18a-9f70f3a5a300}" />
    <Folder Name="Protected" Id="{07ee2556-5865-4658-87ad-680d08d5c620}" />
    <Method Name="Accept" Id="{9759288d-5f0e-0b2c-0d87-315eec92f3c5}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_GraphVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitGraph(THIS^);
inputPortHost.Accept(Visitor);
outputPortHost.Accept(Visitor);
parameterHost.Accept(Visitor);
contentHost.Accept(Visitor);
errorHost.Accept(Visitor);
metadataHost.Accept(Visitor);
extensionHost.Accept(Visitor);
nodeHost.Accept(Visitor);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddContent" Id="{43c3e1b2-e85c-4b92-bb9b-a529db7d4feb}">
      <Declaration><![CDATA[METHOD AddContent
VAR_INPUT
	Content : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[contentHost.AddContent(Content);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsContent" Id="{051e2756-d6ce-4078-a8fe-95749c3e86be}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsContent : I_Content
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	content : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[content := CreateContent(Name, Data);
selfCreatedContent.Push(content);
AddDataAsContent := content;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsInputPort" Id="{7e114abb-9a47-4ab0-9787-ead21c0c896e}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsInputPort : I_InputPort
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	port : I_InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[port := CreateInputPort(Name, Data);
selfCreatedInputPorts.Push(port);
AddDataAsInputPort := port;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsMetadata" Id="{57229b7a-e586-430a-94c1-40273f0ab89a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsMetadata : I_Metadata
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadata := CreateMetadata(Name, Data);
selfCreatedMetadata.Push(metadata);
AddDataAsMetadata := metadata;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsOutputPort" Id="{cf963aaa-510d-4408-b780-7001e9e01f83}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsOutputPort : I_OutputPort
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	port : I_OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[port := CreateOutputPort(Name, Data);
selfCreatedOutputPorts.Push(port);
AddDataAsOutputPort := port;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsParameter" Id="{678ef530-2b50-4f8e-b46b-0450c8502a84}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddDataAsParameter : I_Parameter
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameter := CreateParameter(Name, Data);
selfCreatedParameters.Push(parameter);
AddDataAsParameter := parameter;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddError" Id="{e5ded1e0-602c-46b5-a84f-241532379ef9}">
      <Declaration><![CDATA[METHOD AddError
VAR_INPUT
	Error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[errorHost.AddError(Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddExtension" Id="{6a3d7798-3e04-4866-83e1-d2e5c9f524c0}">
      <Declaration><![CDATA[METHOD AddExtension
VAR_INPUT
	Extension : I_Extension;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensionHost.AddExtension(Extension);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddInputPort" Id="{a51478dc-4bbb-497b-b8fd-ca07b0929901}">
      <Declaration><![CDATA[METHOD AddInputPort
VAR_INPUT
	InputPort : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[inputPortHost.AddInputPort(InputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMetadata" Id="{474999fa-4111-436c-88cf-a07beacebbf7}">
      <Declaration><![CDATA[METHOD AddMetadata
VAR_INPUT
	Metadata : I_Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadataHost.AddMetadata(Metadata);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNode" Id="{7fea7ccf-3d16-412a-aa88-d50922d33d41}">
      <Declaration><![CDATA[METHOD AddNode
VAR_INPUT
	Node : I_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodeHost.AddNode(Node);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddOutputPort" Id="{3c9e050e-4b34-4df0-be37-1a6fe21c02f3}">
      <Declaration><![CDATA[METHOD AddOutputPort
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outputPortHost.AddOutputPort(OutputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddParameter" Id="{c3533279-ddeb-48f8-a0c8-06910a344c53}">
      <Declaration><![CDATA[METHOD AddParameter
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameterHost.AddParameter(Parameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateContent" Id="{821b80ea-fa86-42dc-87c5-a687613888b2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateContent : I_Content
VAR_INPUT
	ContentName : T_MAXSTRING;
	ContentData : I_Datatype;
END_VAR
VAR
	pContent : POINTER TO Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pContent := __NEW(Content(Name := ContentName, Data := ContentData, Parent := THIS^));
CreateContent := pContent^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateInputPort" Id="{4774ef93-51d1-4b01-ae45-ddeffc19be4d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateInputPort : I_InputPort
VAR_INPUT
	PortName : T_MAXSTRING;
	PortData : I_Datatype;
END_VAR
VAR
	pPort : POINTER TO InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pPort := __NEW(InputPort(Name := PortName, Data := PortData, Parent := THIS^));
CreateInputPort := pPort^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateLinks" Id="{4d909e30-29af-469e-b412-8b76819d5508}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC CreateLinks
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	linksDeserializer : I_Deserializer;
	linksEnumerator : I_DeserializerArrayForwardEnumerator;
	linkDeserializer : I_Deserializer;
	sourceNodeId : T_MAXSTRING;
	sourcePortName : T_MAXSTRING;
	destinationNodeId : T_MAXSTRING;
	destinationPortName : T_MAXSTRING;
	sourceNode : I_Node;
	sourcePort : I_OutputPort;
	destinationNode : I_Node;
	destinationPort : I_InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[linksDeserializer := Deserializer.GetKeyArray('links');
linksEnumerator := linksDeserializer.GetArrayEnumerator();

WHILE linksEnumerator.MoveNext() DO
	
	linkDeserializer := linksEnumerator.Current.GetArray();
	
	IF NOT linkDeserializer.GetElementByIndex(1).TryGetString(sourceNodeId) THEN
		CONTINUE;
	END_IF
	
	IF NOT linkDeserializer.GetElementByIndex(2).TryGetString(sourcePortName) THEN
		CONTINUE;
	END_IF
	
	IF NOT linkDeserializer.GetElementByIndex(3).TryGetString(destinationNodeId) THEN
		CONTINUE;
	END_IF
	
	IF NOT linkDeserializer.GetElementByIndex(4).TryGetString(destinationPortName) THEN
		CONTINUE;
	END_IF
	
	IF NOT nodeHost.TryGetNodeById(sourceNodeId, sourceNode) THEN
		CONTINUE;
	END_IF
	
	IF NOT nodeHost.TryGetNodeById(destinationNodeId, destinationNode) THEN
		CONTINUE;
	END_IF
	
	IF NOT sourceNode.TryGetOutputPortByName(sourcePortName, sourcePort) THEN
		CONTINUE;
	END_IF
	
	IF NOT destinationNode.TryGetInputPortByName(destinationPortName, destinationPort) THEN
		CONTINUE;
	END_IF
	
	IF NOT destinationPort.TryConnectTo(sourcePort) THEN
		CONTINUE;
	END_IF
	
END_WHILE

linksEnumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateMetadata" Id="{79447d1a-bb3d-4f7e-8bae-4d14eeeef024}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateMetadata : I_Metadata
VAR_INPUT
	MetadataName : T_MAXSTRING;
	MetadataData : I_Datatype;
END_VAR
VAR
	pMetadata : POINTER TO Metadata;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pMetadata := __NEW(Metadata(Name := MetadataName, Data := MetadataData, Parent := THIS^));
CreateMetadata := pMetadata^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateNodes" Id="{9d17f6c4-8462-4003-b53a-550acec0614e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC CreateNodes
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	nodeDeserializer : I_Deserializer;
	nodesEnumerator : I_DeserializerArrayForwardEnumerator;
	nodeType : T_MAXSTRING;
	node : I_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodeDeserializer := Deserializer.GetKeyArray('nodes');
nodesEnumerator := nodeDeserializer.GetArrayEnumerator();

WHILE nodesEnumerator.MoveNext() DO
	
	IF NOT nodesEnumerator.Current.TryGetKeyString('type',nodeType) THEN
		CONTINUE;
	END_IF
	
	IF NOT nodePrototypes.TryCreateNodeByType(nodeType, node) THEN
		CONTINUE;
	END_IF
	
	selfCreatedNodes.Push(node);
	
	node.TryDeserializeFrom(nodesEnumerator.Current);
	
	AddNode(node);

END_WHILE

nodesEnumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateOutputPort" Id="{80878659-95c1-4307-8fad-d9ab6125a200}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateOutputPort : I_OutputPort
VAR_INPUT
	PortName : T_MAXSTRING;
	PortData : I_Datatype;
END_VAR
VAR
	pPort : POINTER TO OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pPort := __NEW(OutputPort(Name := PortName, Data := PortData, Parent := THIS^));
CreateOutputPort := pPort^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateParameter" Id="{0846f752-8583-4580-8a63-bf73f928e7dc}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateParameter : I_Parameter
VAR_INPUT
	ParameterName : T_MAXSTRING;
	ParameterData : I_Datatype;
END_VAR
VAR
	pParameter : POINTER TO Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pParameter := __NEW(Parameter(Name := ParameterName, Data := ParameterData, Parent := THIS^));
CreateParameter := pParameter^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedContent" Id="{6f51ddea-8f7c-44d4-8341-b8a39ae914ea}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedContent : BOOL
VAR
	content : I_Content;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedContent.TryPop(content) DO
	content.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedInputPorts" Id="{fc440d05-d34c-46d0-a08a-6ed111c8b809}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedInputPorts : BOOL
VAR
	port : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedInputPorts.TryPop(port) DO
	port.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedMetadata" Id="{b2e5abdd-7830-4f5a-b3c3-160b835a1025}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PROTECTED DisposeSelfCreatedMetadata : BOOL
VAR
	metadata : I_Metadata;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedMetadata.TryPop(metadata) DO
	metadata.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedNodes" Id="{32ea0069-1284-46f0-a026-931ea17c32c9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedNodes : BOOL
VAR
	node : I_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedNodes.TryPop(node) DO
	node.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedOutputPorts" Id="{8c4485f9-7854-4941-b988-0b4e78342d48}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedOutputPorts : BOOL
VAR
	port : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedOutputPorts.TryPop(port) DO
	port.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeSelfCreatedParameters" Id="{b371df07-0c6a-4d59-8cdd-d8922d84e439}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedParameters : BOOL
VAR
	parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedParameters.TryPop(parameter) DO
	parameter.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{9dcfff24-3381-0760-25fd-bc1afba0c65f}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeSelfCreatedContent();
DisposeSelfCreatedInputPorts();
DisposeSelfCreatedOutputPorts();
DisposeSelfCreatedParameters();
DisposeSelfCreatedMetadata();
DisposeSelfCreatedNodes();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{dedf069a-1e51-0fed-0932-2607f7394698}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	NodePrototypes : I_NodePrototypes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.nodePrototypes := NodePrototypes;
Initialize();]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasRaisedError" Id="{40a721cd-51fb-40f7-96ac-f59bf9e895b5}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasRaisedError : BOOL]]></Declaration>
      <Get Name="Get" Id="{e8a97c69-cc1f-4f49-91b2-4fc9b7e80985}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasRaisedError := errorHost.HasRaisedError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialize" Id="{6e21f07c-76bf-40e2-81a6-1a7ecbdd42c1}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED Initialize
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{af644928-9aa7-4f95-81f4-05559087b67b}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{372fc9bd-7568-4004-aa2d-fa749851feef}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{1b2d1a3b-915e-478a-b717-699f2b620ff4}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{fa166676-0f3d-0fcb-3385-10008bb949c7}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_uuid := '';
DisposeSelfCreatedNodes();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{1dc36582-e7a3-03d2-2e77-7abd714e98fa}">
      <Declaration><![CDATA[METHOD Run
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodeHost.Execute();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{d25f0f12-a7ca-4c04-8799-67d28e859083}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKeyString('uuid',_uuid);
inputPortHost.SerializeWith(Serializer);
outputPortHost.SerializeWith(Serializer);
parameterHost.SerializeWith(Serializer);
contentHost.SerializeWith(Serializer);
errorHost.SerializeWith(Serializer);
extensionHost.SerializeWith(Serializer);
metadataHost.SerializeWith(Serializer);
nodeHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{99b56a2a-8cdf-4ba7-9ff3-3103bd8e6be2}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	receivedUuid : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameterHost.TryDeserializeFrom(Deserializer);
extensionHost.TryDeserializeFrom(Deserializer);

IF NOT Deserializer.TryGetKeyString('uuid', receivedUuid) THEN
	RETURN;
END_IF

IF Uuid = receivedUuid THEN
	nodeHost.TryDeserializeFrom(Deserializer);
	RETURN;
END_IF

Reset();
CreateNodes(Deserializer);
CreateLinks(Deserializer);
_uuid := receivedUuid;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetContentByName" Id="{e912c915-77b1-4a71-a6fd-89bbc8852568}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetContentByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Content;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	contentName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetContentByName := contentHost.TryGetContentByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
contentName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetContentByName := extension.TryGetContentByName(contentName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetExtensionByName" Id="{29a3bbec-25a6-474f-b6ff-8df26ff54838}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetExtensionByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetExtensionByName := extensionHost.TryGetExtensionByName(Name, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetInputPortByName" Id="{a2b0c48f-12f3-40e0-a4f9-13c01490bfe1}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetInputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_InputPort;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	portName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetInputPortByName := inputPortHost.TryGetInputPortByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
portName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetInputPortByName := extension.TryGetInputPortByName(portName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetMetadataByName" Id="{7218a518-7562-4161-a031-fe6dfb5ae1ad}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetMetadataByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Metadata;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	metadatumName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetMetadataByName := metadataHost.TryGetMetadataByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
metadatumName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetMetadataByName := extension.TryGetMetadataByName(metadatumName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetNodeById" Id="{900685c5-5d69-4e70-9a97-aa769ca12b83}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetNodeById : BOOL
VAR_INPUT
	Id : T_MAXSTRING;
	Destination : REFERENCE TO I_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGetNodeById := nodeHost.TryGetNodeById(Id, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetOutputPortByName" Id="{d96f141e-32e3-4d1a-9edb-007e4130314d}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetOutputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_OutputPort;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	portName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetOutputPortByName := outputPortHost.TryGetOutputPortByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
portName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetOutputPortByName := extension.TryGetOutputPortByName(portName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetParameterByName" Id="{a812c28a-2c76-43b1-a6f1-2e48f4d3e7ae}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetParameterByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Parameter;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	parameterName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetParameterByName := parameterHost.TryGetParameterByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
parameterName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetParameterByName := extension.TryGetParameterByName(parameterName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Uuid" Id="{cbe3c956-8695-4d9e-97b9-f984946d2dd4}">
      <Declaration><![CDATA[PROPERTY PUBLIC Uuid : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{37480370-f818-4d22-9ced-09196bcc4e7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Uuid := _uuid;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>