<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Graph" Id="{bc650401-8298-0fc9-2fc1-27c637239109}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Graph EXTENDS Disposable IMPLEMENTS I_Graph
VAR
	nodePrototypes : I_NodeFactory;
	_uuid : T_MAXSTRING;	
	eventEmitter : EventEmitter;
	nodeHost : NodeHost(THIS^, eventEmitter);
	inputPortHost : InputPortHost(THIS^, eventEmitter);
	outputPortHost : OutputPortHost(THIS^, eventEmitter);
	parameterHost : ParameterHost(THIS^, eventEmitter);
	contentHost : ContentHost(THIS^, eventEmitter);
	alarmHost : AlarmHost(THIS^, eventEmitter);
	metadataHost : MetadataHost(THIS^, eventEmitter);
	extensionHost : ExtensionHost(THIS^,eventEmitter);
	selfCreatedNodes : Stack;
	
	deserializationFailedAlarm : DeserializationFailedAlarm(THIS^);
	deserializationFailedNodeNotSupportedAlarm : DeserializationFailedNodeNotSupportedAlarm(THIS^);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{a293f140-7386-0971-1795-6d18ede4b434}" />
    <Folder Name="Destructor" Id="{b9a66c15-86af-0a69-1a53-9c709ccc1fa3}" />
    <Folder Name="Private" Id="{947f7633-9d50-4f4f-b18a-9f70f3a5a300}" />
    <Method Name="Accept" Id="{9759288d-5f0e-0b2c-0d87-315eec92f3c5}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_GraphVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitGraph(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Alarms" Id="{40513635-33ad-461c-bde2-a9819d0d35d9}">
      <Declaration><![CDATA[PROPERTY PUBLIC Alarms : I_Alarms]]></Declaration>
      <Get Name="Get" Id="{233b47b6-d0e1-4ef9-88a7-e5eb5808f719}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Alarms := alarmHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Contents" Id="{39059414-9636-47dc-ac37-f4b0a119d6ea}">
      <Declaration><![CDATA[PROPERTY PUBLIC Contents : I_Contents]]></Declaration>
      <Get Name="Get" Id="{5ae47c8c-5a32-4ce0-af1e-4ce883bac7f4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Contents := contentHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DisposeSelfCreatedNodes" Id="{32ea0069-1284-46f0-a026-931ea17c32c9}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DisposeSelfCreatedNodes : BOOL
VAR
	node : I_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE selfCreatedNodes.TryPop(node) DO
	nodeHost.RemoveNode(node);
	node.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Extensions" Id="{0d090ae4-4394-4874-bfcf-f0a314315264}">
      <Declaration><![CDATA[PROPERTY PUBLIC Extensions : I_Extensions]]></Declaration>
      <Get Name="Get" Id="{3d4322e4-d725-423a-9f9e-3989911b4031}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Extensions := extensionHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{9dcfff24-3381-0760-25fd-bc1afba0c65f}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeSelfCreatedNodes();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{dedf069a-1e51-0fed-0932-2607f7394698}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	NodePrototypes : I_NodeFactory;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.nodePrototypes := NodePrototypes;]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasRaisedAlarm" Id="{40a721cd-51fb-40f7-96ac-f59bf9e895b5}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasRaisedAlarm : BOOL]]></Declaration>
      <Get Name="Get" Id="{e8a97c69-cc1f-4f49-91b2-4fc9b7e80985}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasRaisedAlarm := alarmHost.HasRaisedAlarm;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InputPorts" Id="{398f8511-f041-4cf6-80c1-a4866ad76765}">
      <Declaration><![CDATA[PROPERTY PUBLIC InputPorts : I_InputPorts]]></Declaration>
      <Get Name="Get" Id="{0052a29e-ea51-4791-8bec-259a8db9408d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InputPorts := inputPortHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Metadatum" Id="{e2cf977e-854a-451f-b8cd-d40abe99112c}">
      <Declaration><![CDATA[PROPERTY PUBLIC Metadatum : I_Metadatum]]></Declaration>
      <Get Name="Get" Id="{30a26df6-26d3-4e76-9b44-29e0f9364dbc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Metadatum := metadataHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Nodes" Id="{e153e716-522f-4af7-a7bf-cce5cb4afa6b}">
      <Declaration><![CDATA[PROPERTY PUBLIC Nodes : I_Nodes]]></Declaration>
      <Get Name="Get" Id="{ec652be8-1265-4f63-b0ca-f9d503527ba4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Nodes := nodeHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{af644928-9aa7-4f95-81f4-05559087b67b}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{372fc9bd-7568-4004-aa2d-fa749851feef}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{1b2d1a3b-915e-478a-b717-699f2b620ff4}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Property Name="OutputPorts" Id="{8e3ca3f5-c2cc-499c-8b91-1abe2bceab5c}">
      <Declaration><![CDATA[PROPERTY PUBLIC OutputPorts : I_OutputPorts]]></Declaration>
      <Get Name="Get" Id="{59873fc6-a2f3-47d6-a930-4782bf6add5a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[OutputPorts := outputPortHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Parameters" Id="{dbab05c2-5d61-4167-be2f-1a06075cc828}">
      <Declaration><![CDATA[PROPERTY PUBLIC Parameters : I_Parameters]]></Declaration>
      <Get Name="Get" Id="{a297f7f1-cbde-42b2-92b0-1afbd0c6b7fb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Parameters := parameterHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{fa166676-0f3d-0fcb-3385-10008bb949c7}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_uuid := '';
DisposeSelfCreatedNodes();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{1dc36582-e7a3-03d2-2e77-7abd714e98fa}">
      <Declaration><![CDATA[METHOD Run
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodeHost.Execute();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{d25f0f12-a7ca-4c04-8799-67d28e859083}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKeyString('uuid',_uuid);
inputPortHost.SerializeWith(Serializer);
outputPortHost.SerializeWith(Serializer);
parameterHost.SerializeWith(Serializer);
contentHost.SerializeWith(Serializer);
alarmHost.SerializeWith(Serializer);
extensionHost.SerializeWith(Serializer);
metadataHost.SerializeWith(Serializer);
nodeHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{99b56a2a-8cdf-4ba7-9ff3-3103bd8e6be2}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	receivedUuid : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeserializationFailedNodeNotSupportedAlarm.Clear();
DeserializationFailedAlarm.Clear();

IF NOT parameterHost.TryDeserializeFrom(Deserializer, Feedback) THEN
	RETURN;
END_IF

IF NOT extensionHost.TryDeserializeFrom(Deserializer, Feedback) THEN
	RETURN;
END_IF

IF NOT Deserializer.TryGetKeyString('uuid', receivedUuid, Feedback) THEN
	RETURN;
END_IF

Reset();

IF NOT TryDeserializeNodes(Deserializer, Feedback) THEN 
	RETURN;
END_IF

IF NOT TryDeserializeLinks(Deserializer, Feedback) THEN
	RETURN;
END_IF

_uuid := receivedUuid;
TryDeserializeFrom := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeLinks" Id="{4d909e30-29af-469e-b412-8b76819d5508}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeLinks : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	linksDeserializer : I_Deserializer;
	linksEnumerator : I_DeserializerArrayForwardEnumerator;
	linkDeserializer : I_Deserializer;
	sourceNodeId : T_MAXSTRING;
	sourcePortName : T_MAXSTRING;
	destinationNodeId : T_MAXSTRING;
	destinationPortName : T_MAXSTRING;
	sourceNode : I_Node;
	sourcePort : I_OutputPort;
	destinationNode : I_Node;
	destinationPort : I_InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[linksDeserializer := Deserializer.GetKeyArray('links');
linksEnumerator := linksDeserializer.GetArrayEnumerator();

WHILE linksEnumerator.MoveNext() DO
	
	linkDeserializer := linksEnumerator.Current.GetArray();
	
	IF NOT linkDeserializer.GetElementByIndex(1).TryGetString(sourceNodeId, Feedback) THEN
		DeserializationFailedAlarm.Raise('Missing source node id from link');
		RETURN;
	END_IF
	
	IF NOT linkDeserializer.GetElementByIndex(2).TryGetString(sourcePortName, Feedback) THEN
		DeserializationFailedAlarm.Raise('Missing source port name from link');
		RETURN;
	END_IF
	
	IF NOT linkDeserializer.GetElementByIndex(3).TryGetString(destinationNodeId, Feedback) THEN
		DeserializationFailedAlarm.Raise('Missing destination node id from link');
		RETURN;
	END_IF
	
	IF NOT linkDeserializer.GetElementByIndex(4).TryGetString(destinationPortName, Feedback) THEN
		DeserializationFailedAlarm.Raise('Missing destination port name from link');
		RETURN;
	END_IF
	
	IF NOT nodeHost.TryGetNodeById(sourceNodeId, sourceNode) THEN
		DeserializationFailedAlarm.Raise('Unable to get source node when creating link');
		RETURN;
	END_IF
	
	IF NOT nodeHost.TryGetNodeById(destinationNodeId, destinationNode) THEN
		DeserializationFailedAlarm.Raise('Unable to get destination node when creating link');
		RETURN;
	END_IF
	
	IF NOT sourceNode.OutputPorts.TryGetOutputPortByName(sourcePortName, sourcePort) THEN
		DeserializationFailedAlarm.Raise('Unable to get source port when creating link');
		RETURN;
	END_IF
	
	IF NOT destinationNode.InputPorts.TryGetInputPortByName(destinationPortName, destinationPort) THEN
		DeserializationFailedAlarm.Raise('Unable to get destination port when creating link');
		RETURN;
	END_IF
	
	IF NOT destinationPort.TryConnectTo(sourcePort) THEN
		DeserializationFailedAlarm.Raise('Unable to connect source to destination when creating link');
		RETURN;
	END_IF
	
END_WHILE

linksEnumerator.Dispose();
TryDeserializeLinks := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeNodes" Id="{9d17f6c4-8462-4003-b53a-550acec0614e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeNodes : BOOL;
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	nodeDeserializer : I_Deserializer;
	nodesEnumerator : I_DeserializerArrayForwardEnumerator;
	nodeType : T_MAXSTRING;
	pError : POINTER TO MissingNodePrototypeDeserializationError;
	node : I_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodeDeserializer := Deserializer.GetKeyArray('nodes');
nodesEnumerator := nodeDeserializer.GetArrayEnumerator();

WHILE nodesEnumerator.MoveNext() DO
	
	IF NOT nodesEnumerator.Current.TryGetKeyString('type',nodeType, Feedback) THEN
		RETURN;
	END_IF
	
	IF NOT nodePrototypes.TryCreateNodeByType(nodeType, node) THEN
		pError := __NEW(MissingNodePrototypeDeserializationError(MissingType := nodeType));
		Feedback.LogError(pError^);
		DeserializationFailedNodeNotSupportedAlarm.Raise(nodeType);
		RETURN;
	END_IF
	
	selfCreatedNodes.Push(node);
	
	IF NOT node.TryDeserializeFrom(nodesEnumerator.Current, Feedback) THEN
		DeserializationFailedAlarm.Raise('Node failed to deserialize');
		RETURN;
	END_IF
	
	Nodes.AddNode(node);

END_WHILE

nodesEnumerator.Dispose();
TryDeserializeNodes := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Uuid" Id="{cbe3c956-8695-4d9e-97b9-f984946d2dd4}">
      <Declaration><![CDATA[PROPERTY PUBLIC Uuid : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{37480370-f818-4d22-9ced-09196bcc4e7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Uuid := _uuid;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>