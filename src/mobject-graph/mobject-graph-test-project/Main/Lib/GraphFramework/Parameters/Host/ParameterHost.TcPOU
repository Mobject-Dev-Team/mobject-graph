<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ParameterHost" Id="{6bfffedc-4830-48d6-a087-df5e0f37d1bd}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ParameterHost IMPLEMENTS I_HostParameters, I_Serializable
VAR
	eventTarget : I_EventTarget;
	parameters : Dictionary;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{d962da93-42f3-408c-9e94-0c5674d47b60}" />
    <Folder Name="Protected" Id="{fa8eb0b0-8e53-404f-9aa4-b19cb7b4447d}" />
    <Method Name="Accept" Id="{67a986cb-c3c8-4714-95da-82654735a15b}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_ParameterVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := parameters.GetEnumerator();

WHILE (enumerator.MoveNext()) DO
	
	IF enumerator.TryGet(parameter) THEN
		parameter.Accept(Visitor);
	END_IF

END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddParameter" Id="{62100911-1991-410b-b3b5-a2e6486a3099}">
      <Declaration><![CDATA[METHOD PUBLIC AddParameter
VAR_INPUT
	Parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameters.AddOrUpdate(Parameter.Name, Parameter);
EmitOnParameterAddedEvent(Parameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnParameterAddedEvent" Id="{2bfcadd9-8f8c-414b-8ace-7e1444c758d9}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnParameterAddedEvent
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
VAR
	pParameterAddedEvent : POINTER TO ParameterAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eventTarget = 0 THEN
	RETURN;
END_IF

pParameterAddedEvent := __NEW(ParameterAddedEvent(TargetParameter := Parameter));
eventTarget.Emit('OnParameterAdded',pParameterAddedEvent^);
pParameterAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{163161dd-2b78-474f-b1ea-d4408046e436}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	parentEventTarget : I_EventTarget;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventTarget := parentEventTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{3efcd39e-7699-4bc3-a13e-91d6be2edb8c}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF parameters.Count = 0 THEN
	RETURN;
END_IF

Serializer.AddKey('parameters');
Serializer.StartArray();

enumerator := parameters.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(parameter) THEN
		parameter.SerializeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();

Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{68598c49-0246-4a15-9061-effd05f51e98}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	parametersDeserializer : I_Deserializer;
	parametersEnumerator : I_DeserializerObjectForwardEnumerator;
	parameterName : T_MAXSTRING;
	parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parametersDeserializer := Deserializer.GetKeyObject('properties');
parametersEnumerator := parametersDeserializer.GetObjectEnumerator();

WHILE parametersEnumerator.MoveNext() DO
	
	IF NOT TryGetParameterByName(parametersEnumerator.Key, parameter) THEN
		CONTINUE;
	END_IF
	
	IF NOT parameter.TryDeserializeFrom(parametersEnumerator.Current) THEN
		RETURN;
	END_IF

END_WHILE

parametersEnumerator.Dispose();
TryDeserializeFrom := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetParameterByName" Id="{ab07ca82-19c6-40f6-a546-6746aad8fa7f}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetParameterByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Parameter;
END_VAR
VAR
	parameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT parameters.TryGetValue(Name, parameter) THEN
	RETURN;
END_IF

Destination := parameter;
TryGetParameterByName := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>