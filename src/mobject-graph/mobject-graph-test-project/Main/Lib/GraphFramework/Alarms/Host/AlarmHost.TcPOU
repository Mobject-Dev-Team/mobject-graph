<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="AlarmHost" Id="{50541dba-cdf2-4bcb-9556-2627a6035f55}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK AlarmHost IMPLEMENTS I_HostAlarms, I_Serializable
VAR
	eventTarget : I_EventTarget;
	alarms : Stack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{671229fd-7f17-4a0e-adb2-f45de0155677}" />
    <Folder Name="Protected" Id="{59ff69d6-248f-41d0-a53d-636acfd4aa56}" />
    <Method Name="Accept" Id="{337d8628-3c2e-45e4-9de1-44fe62acf628}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_AlarmVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	alarm : I_Alarm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := alarms.GetEnumerator();

WHILE (enumerator.MoveNext()) DO
	
	IF enumerator.TryGet(alarm) THEN
		alarm.Accept(Visitor);
	END_IF

END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddAlarm" Id="{4732f287-e1c3-43fd-a5fa-5146e0069c2d}">
      <Declaration><![CDATA[METHOD PUBLIC AddAlarm
VAR_INPUT
	Alarm : I_Alarm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[alarms.Push(Alarm);
EmitOnAlarmAddedEvent(Alarm);]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnAlarmAddedEvent" Id="{4aac7d20-3cc4-46ba-916e-e7385b93bf4f}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnAlarmAddedEvent
VAR_INPUT
	Alarm : I_Alarm;
END_VAR
VAR
	pAlarmAddedEvent : POINTER TO AlarmAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eventTarget = 0 THEN
	RETURN;
END_IF

pAlarmAddedEvent := __NEW(AlarmAddedEvent(Target := Alarm));
eventTarget.Emit('OnAlarmAdded',pAlarmAddedEvent^);
pAlarmAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{68af8c17-b6a6-49cc-8bf1-772d6361db00}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	parentEventTarget : I_EventTarget;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventTarget := parentEventTarget;]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasRaisedAlarm" Id="{0e9d7d0f-b9ab-45ac-9f39-de7d687d3cfb}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasRaisedAlarm : BOOL]]></Declaration>
      <Get Name="Get" Id="{2d00a89d-9c3c-4b37-bcce-c4d952fb7fe7}">
        <Declaration><![CDATA[VAR
	enumerator : I_ForwardEnumerator;
	alarm : I_Alarm;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[enumerator := alarms.GetEnumerator();

WHILE (enumerator.MoveNext()) DO
	
	IF NOT enumerator.TryGet(alarm) THEN
		CONTINUE;
	END_IF
	
	IF alarm.Active THEN
		HasRaisedAlarm := TRUE;
		EXIT;
	END_IF

END_WHILE

enumerator.Dispose();]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeWith" Id="{18386344-9d4a-4d83-b974-3737c89d52ea}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	alarm : I_Alarm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF alarms.Count = 0 THEN
	RETURN;
END_IF

Serializer.AddKey('alarms');
Serializer.StartArray();

enumerator := alarms.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(alarm) THEN
		alarm.SerializeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();
Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>