<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Extension" Id="{42104a2a-bb11-0099-07c8-1566fddf2573}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Extension EXTENDS Disposable IMPLEMENTS I_Extension
VAR
	_name : T_MAXSTRING;
	eventEmitter : EventEmitter;
	inputPortHost : InputPortHost(THIS^, eventEmitter);
	outputPortHost : OutputPortHost(THIS^, eventEmitter);
	parameterHost : ParameterHost(THIS^, eventEmitter);
	contentHost : ContentHost(THIS^, eventEmitter);
	alarmHost : AlarmHost(THIS^, eventEmitter);
	metadataHost : MetadataHost(THIS^, eventEmitter);
	deserializationFailedAlarm : DeserializationFailedAlarm(THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{fef26075-0f2d-0849-2106-d8875bfcef87}" />
    <Method Name="Accept" Id="{c7a8469c-4655-04f0-2d46-e58992b2a552}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_ExtensionVisitor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitExtension(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Alarms" Id="{38405563-9eba-4f71-8dcd-cf20957d043b}">
      <Declaration><![CDATA[PROPERTY PUBLIC Alarms : I_Alarms]]></Declaration>
      <Get Name="Get" Id="{3269d7b9-d288-4ed9-9214-bdb53313c924}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Alarms := alarmHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Contents" Id="{a9a42cd6-7097-4725-b214-cb8b67485dd4}">
      <Declaration><![CDATA[PROPERTY PUBLIC Contents : I_Contents]]></Declaration>
      <Get Name="Get" Id="{953ef3e6-38c8-4841-9a38-9c96531a16cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Contents := contentHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{b8dc459b-fb89-0be1-1d4e-1dd2490364b6}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Name : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_name := Name;]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasRaisedAlarm" Id="{ee5f41d7-87a5-49be-bf72-f24c29827daa}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasRaisedAlarm : BOOL]]></Declaration>
      <Get Name="Get" Id="{6320bccd-9e0f-4da2-b00f-578639dbdeac}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[HasRaisedAlarm := alarmHost.HasRaisedAlarm;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InputPorts" Id="{b7a6296f-27b4-4340-b7ef-343b62f3edf7}">
      <Declaration><![CDATA[PROPERTY PUBLIC InputPorts : I_InputPorts]]></Declaration>
      <Get Name="Get" Id="{8118710b-0c54-4ae2-9113-3e7754f4b74e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InputPorts := inputPortHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Metadatum" Id="{e9234dd5-4fd4-41af-a31d-b175d27c2d98}">
      <Declaration><![CDATA[PROPERTY PUBLIC Metadatum : I_Metadatum]]></Declaration>
      <Get Name="Get" Id="{a78ddeb2-5b9f-47ba-8fc3-a9eb13e98a71}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Metadatum := metadataHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Name" Id="{3ea0ca14-7e1c-0f9c-0dd4-fc640a163eef}">
      <Declaration><![CDATA[PROPERTY PUBLIC Name : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{89da2b88-6436-0494-1a12-900ee5d5f448}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := _name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OffEvent" Id="{7c991add-898b-4ce2-b48c-156ceb4e3445}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{057d5c02-4afe-46f3-b0ee-2a2800b6229d}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{84177a9d-8640-40f8-aff3-a509bb613f25}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Property Name="OutputPorts" Id="{5365d586-3a8a-4437-bb93-2d474752253a}">
      <Declaration><![CDATA[PROPERTY PUBLIC OutputPorts : I_OutputPorts]]></Declaration>
      <Get Name="Get" Id="{de5afd38-3b47-49a0-8d84-86b01c0d96b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[OutputPorts := outputPortHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Parameters" Id="{6cc3740d-3154-431b-9856-ea4412d05b77}">
      <Declaration><![CDATA[PROPERTY PUBLIC Parameters : I_Parameters]]></Declaration>
      <Get Name="Get" Id="{58201fc1-3dec-4daf-be8e-4870151e2ca2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Parameters := parameterHost;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeWith" Id="{f0a208e7-7dd4-4f99-8c68-aad6715feaed}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKeyString('name',_name);
inputPortHost.SerializeWith(Serializer);
outputPortHost.SerializeWith(Serializer);
parameterHost.SerializeWith(Serializer);
contentHost.SerializeWith(Serializer);
alarmHost.SerializeWith(Serializer);
metadataHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{6d59da26-ba4e-4a2b-89b3-fd3987fd40bc}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[DeserializationFailedAlarm.Clear();

IF NOT parameterHost.TryDeserializeFrom(Deserializer, Feedback) THEN
	DeserializationFailedAlarm.Raise('Failed to deserialize parameters');
	RETURN;
END_IF

TryDeserializeFrom := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>