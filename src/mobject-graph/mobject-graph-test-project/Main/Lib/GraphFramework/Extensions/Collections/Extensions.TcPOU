<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Extensions" Id="{27384f57-a8c2-0737-00e0-7bb51765e0ee}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Extensions IMPLEMENTS I_Extensions
VAR
	extensions : Stack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="GetEnumerator" Id="{2921e2e3-0729-0b2c-3db6-d5131b4b9730}">
      <Declaration><![CDATA[METHOD PUBLIC GetEnumerator : I_ForwardEnumerator
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetEnumerator := extensions.GetEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{d4009a20-cf50-0b51-2df8-6eb5fce58568}">
      <Declaration><![CDATA[METHOD PUBLIC Insert
VAR_INPUT
	ExtensionToAdd : I_Extension;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensions.Push(ExtensionToAdd);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{3972c617-e8db-48ec-a4a5-5fae32edf247}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartArray();

enumerator := extensions.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(extension) THEN
		extension.SerializeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();

Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{5fd76894-9d93-4788-ac99-38ffd676b4e9}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	extensionsEnumerator : I_DeserializerForwardEnumerator;
	extensionName : T_MAXSTRING;
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensionsEnumerator := Deserializer.GetArrayElementEnumerator();

WHILE extensionsEnumerator.MoveNext() DO
	
	IF NOT extensionsEnumerator.Current.TryGetKeyString('name',extensionName) THEN
		CONTINUE;
	END_IF
	
	IF NOT TryGetByName(extensionName, extension)THEN
		CONTINUE;
	END_IF
	
	extension.TryDeserializeFrom(extensionsEnumerator.Current);

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetByName" Id="{02ffb6dc-d7f2-07ef-266b-097a2ed92420}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetByName : BOOL
VAR_INPUT
	Name : STRING;
	Destination : REFERENCE TO I_Extension;
END_VAR
VAR
	extensionEnumerator : I_ForwardEnumerator;
	currentExtension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensionEnumerator := extensions.GetEnumerator();

WHILE extensionEnumerator.MoveNext() DO 
	IF NOT extensionEnumerator.TryGet(currentExtension) THEN
		CONTINUE;
	END_IF
	
	IF currentExtension.Name = Name THEN 
		TryGetByName := TRUE;
		Destination := currentExtension;
		EXIT;
	END_IF

END_WHILE

extensionEnumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>