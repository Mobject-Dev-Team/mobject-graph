<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BaseElement" Id="{65854565-5a7d-02f2-2709-1993949f09a2}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK BaseElement EXTENDS Disposable IMPLEMENTS I_EventEmitter, I_BaseElement
VAR
	inputPorts : InputPorts;
	outputPorts : OutputPorts;
	parameters : Parameters;
	contents : Contents;
	errors : Errors;
	extensions : Extensions;
	metadata : Metadata;
	eventEmitter : EventEmitter;
	disposables : Stack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{8396773a-400b-43fa-8a6d-bbe9b1d6ecd3}" />
    <Folder Name="Protected" Id="{48a95438-1d6b-0ead-29c1-c8ed21d5c5f8}" />
    <Method Name="AddContent" Id="{65c5bac1-a3d0-002c-2cbe-a7b37fe3b45b}">
      <Declaration><![CDATA[METHOD AddContent
VAR_INPUT
	Content : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterContent(Content);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsContent" Id="{56e24acc-fc0e-4690-8a55-08bdbfb1feb3}">
      <Declaration><![CDATA[METHOD AddDataAsContent
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	newContent : I_Content;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newContent := CreateContent(Name, Data);
RegisterDisposableToSelf(newContent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsInputPort" Id="{4722f8e7-5165-4f79-9bed-1e281e05abb9}">
      <Declaration><![CDATA[METHOD AddDataAsInputPort
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	newInputPort : I_InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newInputPort := CreateInputPort(Name, Data);
RegisterDisposableToSelf(newInputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsMetadatum" Id="{ed05838c-c8db-47b2-b458-cf6a0e28cf42}">
      <Declaration><![CDATA[METHOD AddDataAsMetadatum
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	newMetadatum : I_Metadatum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newMetadatum := CreateMetadatum(Name, Data);
RegisterDisposableToSelf(newMetadatum);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsOutputPort" Id="{dca4d70a-2386-4112-8b2e-e77a6edffbe6}">
      <Declaration><![CDATA[METHOD AddDataAsOutputPort
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	newOutputPort : I_OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newOutputPort := CreateOutputPort(Name, Data);
RegisterDisposableToSelf(newOutputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddDataAsParameter" Id="{36004062-8b8a-4b3b-89b0-5b74d6f6bc9b}">
      <Declaration><![CDATA[METHOD AddDataAsParameter
VAR_INPUT
	Name : T_MAXSTRING;
	Data : I_Datatype;
END_VAR
VAR
	newParameter : I_Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[newParameter := CreateParameter(Name, Data);
RegisterDisposableToSelf(newParameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddError" Id="{4bbd3a02-551d-0fb6-097a-770c7ef9b02a}">
      <Declaration><![CDATA[METHOD AddError
VAR_INPUT
	Error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterError(Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddExtension" Id="{12d5c379-9667-00ca-1a5e-59797e6bc21d}">
      <Declaration><![CDATA[METHOD AddExtension
VAR_INPUT
	Extension : I_Extension;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterExtension(Extension);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddInputPort" Id="{8aebf87c-0955-0d8e-0a5d-38af87c0ae0d}">
      <Declaration><![CDATA[METHOD AddInputPort
VAR_INPUT
	InputPort : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterInputPort(InputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMetadatum" Id="{371a7ce8-9ce1-0df1-08ad-592aac14c8db}">
      <Declaration><![CDATA[METHOD AddMetadatum
VAR_INPUT
	Metadatum : I_Metadatum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterMetadatum(Metadatum);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddOutputPort" Id="{8d1e0294-027c-08af-0add-f26ea3b4e6b4}">
      <Declaration><![CDATA[METHOD AddOutputPort
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterOutputPort(OutputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddParameter" Id="{22e10c77-042d-014a-1131-e8a94df32d37}">
      <Declaration><![CDATA[METHOD AddParameter
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RegisterParameter(Parameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateInputPort" Id="{e170d3ea-2856-48fe-99f4-ab4fbe2d037c}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateInputPort : I_InputPort
VAR_INPUT
	InputPortName : T_MAXSTRING;
	InputPortData : I_Datatype;
END_VAR
VAR
	pInputPort: POINTER TO InputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pInputPort := __NEW(InputPort(Name := InputPortName, Data := InputPortData, Parent := THIS^));
CreateInputPort := pInputPort^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateMetadatum" Id="{5968e678-9de2-4729-86a6-a85bb24c388e}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateMetadatum : I_Metadatum
VAR_INPUT
	MetadatumName : T_MAXSTRING;
	MetadatumData : I_Datatype;
END_VAR
VAR
	pMetadatum : POINTER TO Metadatum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pMetadatum := __NEW(Metadatum(Name := MetadatumName, Data := MetadatumData, Parent := THIS^));
CreateMetadatum := pMetadatum^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateOutputPort" Id="{bf3f2d9c-860a-4f77-a8dc-28e59fb38283}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateOutputPort : I_OutputPort
VAR_INPUT
	OutputPortName : T_MAXSTRING;
	OutputPortData : I_Datatype;
END_VAR
VAR
	pOutputPort : POINTER TO OutputPort;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pOutputPort := __NEW(OutputPort(Name := OutputPortName, Data := OutputPortData, Parent := THIS^));
CreateOutputPort := pOutputPort^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateParameter" Id="{1ddc001e-24d0-48f3-b9e0-ff7f17397987}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateParameter : I_Parameter
VAR_INPUT
	ParameterName : T_MAXSTRING;
	ParameterData : I_Datatype;
END_VAR
VAR
	pParameter : POINTER TO Parameter;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pParameter := __NEW(Parameter(Name := ParameterName, Data := ParameterData, Parent := THIS^));
CreateParameter := pParameter^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisposeAll" Id="{cb49ffb4-2cda-42c6-89fb-5c15e2905cfd}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED DisposeAll : BOOL
VAR_INPUT
END_VAR
VAR
	disposable : I_Disposable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE disposables.TryPop(disposable) DO
	disposable.Dispose();
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnErrorAddedEvent" Id="{5f18b0c5-cc95-02f2-100c-2ef3ad7e1a71}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnErrorAddedEvent
VAR_INPUT
	Error : I_Error;
END_VAR
VAR
	pErrorAddedEvent : POINTER TO ErrorAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Error = 0 THEN
	RETURN;
END_IF

pErrorAddedEvent := __NEW(ErrorAddedEvent(TargetError := Error));
eventEmitter.Emit('OnErrorAdded',pErrorAddedEvent^);
pErrorAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnExtensionAddedEvent" Id="{f402631d-81f9-0a12-03bc-2a0bfe9edd1d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnExtensionAddedEvent
VAR_INPUT
	Extension : I_Extension;
END_VAR
VAR
	pExtensionAddedEvent : POINTER TO ExtensionAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Extension = 0 THEN
	RETURN;
END_IF

pExtensionAddedEvent := __NEW(ExtensionAddedEvent(TargetExtension := Extension));
eventEmitter.Emit('OnExtensionAdded',pExtensionAddedEvent^);
pExtensionAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnInputPortAddedEvent" Id="{999a27ba-e180-0c81-3fd5-7f26e1dcafa9}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnInputPortAddedEvent
VAR_INPUT
	InputPort : I_InputPort;
END_VAR
VAR
	pInputPortAddedEvent : POINTER TO InputPortAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF InputPort = 0 THEN
	RETURN;
END_IF

pInputPortAddedEvent := __NEW(InputPortAddedEvent(TargetInputPort := InputPort));
eventEmitter.Emit('OnInputPortAdded',pInputPortAddedEvent^);
pInputPortAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnMetadatumAddedEvent" Id="{5e041b08-cbe4-0f2d-0996-099d35827b7a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnMetadatumAddedEvent
VAR_INPUT
	Metadatum : I_Metadatum;
END_VAR
VAR
	pMetadatumAddedEvent : POINTER TO MetadatumAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Metadatum = 0 THEN
	RETURN;
END_IF

pMetadatumAddedEvent := __NEW(MetadatumAddedEvent(TargetMetadatum := Metadatum));
eventEmitter.Emit('OnMetadatumAdded',pMetadatumAddedEvent^);
pMetadatumAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnOutputPortAddedEvent" Id="{0092de63-0b62-04d1-3582-5fcf00057f98}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnOutputPortAddedEvent
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR
VAR
	pOutputPortAddedEvent : POINTER TO OutputPortAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF OutputPort = 0 THEN
	RETURN;
END_IF

pOutputPortAddedEvent := __NEW(OutputPortAddedEvent(TargetOutputPort := OutputPort));
eventEmitter.Emit('OnOutputPortAdded',pOutputPortAddedEvent^);
pOutputPortAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnParameterAddedEvent" Id="{ef9a119a-00ba-01e3-3336-a5211fd3bf30}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnParameterAddedEvent
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
VAR
	pParameterAddedEvent : POINTER TO PropertyAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Parameter = 0 THEN
	RETURN;
END_IF

pParameterAddedEvent := __NEW(PropertyAddedEvent(TargetProperty := Parameter));
eventEmitter.Emit('OnParameterAdded',pParameterAddedEvent^);
pParameterAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{6b932cb7-4150-4273-8597-9e500c0eaf5e}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DisposeAll();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetContents" Id="{81f125c5-c13a-026a-3de6-aa1ebc6668c9}">
      <Declaration><![CDATA[METHOD PUBLIC GetContents : I_Contents
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetContents := contents;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetErrors" Id="{0627fae9-4882-0c55-17d9-c59657d05963}">
      <Declaration><![CDATA[METHOD PUBLIC GetErrors : I_Errors
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetErrors := errors;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetExtensions" Id="{be4c5a1a-53d3-0499-27b1-32409495df61}">
      <Declaration><![CDATA[METHOD PUBLIC GetExtensions : I_Extensions
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetExtensions := extensions;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetInputPorts" Id="{7de9fbdd-fa4d-0d6e-0b3b-13feae4c89d5}">
      <Declaration><![CDATA[METHOD PUBLIC GetInputPorts : I_InputPorts
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetInputPorts := inputPorts;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMetadata" Id="{dbde985b-051a-0727-258a-c2925ede1d19}">
      <Declaration><![CDATA[METHOD PUBLIC GetMetadata : I_Metadata
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMetadata := metadata;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetOutputPorts" Id="{f627e22a-94e0-005f-10c4-a9f76f86d6e8}">
      <Declaration><![CDATA[METHOD PUBLIC GetOutputPorts : I_OutputPorts
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetOutputPorts := outputPorts;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetParameters" Id="{f803076c-9d09-002d-18bd-949f984e4d58}">
      <Declaration><![CDATA[METHOD PUBLIC GetParameters : I_Parameters
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetParameters := parameters;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{3826f2c5-8817-085f-32d4-f42ca6017d84}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{c0653d6f-a473-06ad-0f4f-23e16a4ab170}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{f1641710-5271-0c90-204a-d8ba0111dbe4}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterDisposableToSelf" Id="{818ccf26-b9c1-40b3-8452-6ca75c4281c5}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterDisposableToSelf
VAR_INPUT
	Disposable : I_Disposable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[disposables.Push(Disposable);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterError" Id="{65cdee1a-3625-45b6-bfd7-f72ce4f3aef5}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterError
VAR_INPUT
	Error : I_Error;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[errors.Insert(Error);
EmitOnErrorAddedEvent(Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterExtension" Id="{f527d3d7-1297-4450-90c8-dbf3475e7a3d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterExtension
VAR_INPUT
	Extension : I_Extension;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensions.Insert(Extension);
EmitOnExtensionAddedEvent(Extension);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterInputPort" Id="{a90f95fc-e99b-45fe-ad6f-5621929e0e45}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterInputPort
VAR_INPUT
	InputPort : I_InputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[inputPorts.Insert(InputPort);
EmitOnInputPortAddedEvent(InputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterMetadatum" Id="{c3fb64d8-e827-436e-9972-728da0497a0c}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterMetadatum
VAR_INPUT
	Metadatum : I_Metadatum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[metadata.Insert(Metadatum);
EmitOnMetadatumAddedEvent(Metadatum);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterOutputPort" Id="{8be6e625-9fd4-44dd-a437-f152d0338e1b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterOutputPort
VAR_INPUT
	OutputPort : I_OutputPort;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[outputPorts.Insert(OutputPort);
EmitOnOutputPortAddedEvent(OutputPort);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterParameter" Id="{8ed8ffd2-775b-4ca8-bf44-de6ba556c507}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED RegisterParameter
VAR_INPUT
	Parameter : I_Parameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[parameters.Insert(Parameter);
EmitOnParameterAddedEvent(Parameter);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{41b86bad-3ef8-4c80-9f08-2299a4ef627c}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKeyObject('inputPorts',inputPorts);
Serializer.AddKeyObject('outputPorts',outputPorts);
Serializer.AddKeyObject('parameters',parameters);
Serializer.AddKeyObject('contents',contents);
Serializer.AddKeyObject('errors',errors);
Serializer.AddKeyObject('extensions',extensions);
Serializer.AddKeyObject('metadata',metadata);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeExtensionsFrom" Id="{ad9e3ab9-6d42-4e27-a29c-b45a0249832c}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeExtensionsFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	extensionsDeserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[extensionsDeserializer := Deserializer.GetKey('extensions');
extensions.TryDeserializeFrom(extensionsDeserializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{520fe007-9bcd-4e66-88a2-2aa342fc675e}">
      <Declaration><![CDATA[METHOD PUBLIC TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := 
	TryDeserializeParametersFrom(Deserializer) AND 
	TryDeserializeExtensionsFrom(Deserializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeParametersFrom" Id="{c54ae027-05a9-42d5-aace-677f13db3ada}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeParametersFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
END_VAR
VAR
	parametersDeserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[parametersDeserializer := Deserializer.GetKey('properties');
parameters.TryDeserializeFrom(parametersDeserializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetContentByName" Id="{5ed45c1e-e709-063a-078b-c4ffa6e05f7e}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetContentByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Content;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	contentName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetContentByName := contents.TryGetByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
contentName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetContentByName := extension.TryGetContentByName(contentName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetExtensionByName" Id="{40285acc-4e71-0188-0b28-516f73de9f1d}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetExtensionByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Extension;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	remainingName : T_MAXSTRING;
	extension : I_Extension;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetExtensionByName := extensions.TryGetByName(Name, Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
remainingName := GetLastSegmentFromNamespace(Name);

IF NOT this^.TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetExtensionByName := extension.TryGetExtensionByName(remainingName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetInputPortByName" Id="{f48a519d-be51-089e-1869-f8f4fa949214}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetInputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_InputPort;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	portName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetInputPortByName := inputPorts.TryGetByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
portName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetInputPortByName := extension.TryGetInputPortByName(portName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetMetadatumByName" Id="{a3a91194-7db2-0843-24e0-73a63eb18407}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetMetadatumByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Metadatum;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	metadatumName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetMetadatumByName := metadata.TryGetByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
metadatumName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetMetadatumByName := extension.TryGetMetadatumByName(metadatumName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetOutputPortByName" Id="{e92ddf93-b96a-08ad-01fb-739fc2280c59}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetOutputPortByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_OutputPort;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	portName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HasExtensionNamespace(Name) THEN
	TryGetOutputPortByName := outputPorts.TryGetByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
portName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetOutputPortByName := extension.TryGetOutputPortByName(portName, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetParameterByName" Id="{f428aa13-e6f6-0562-2045-054d9aa11372}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetParameterByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Parameter;
END_VAR
VAR
	extensionName : T_MAXSTRING;
	extension : I_Extension;
	parameterName : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Not HasExtensionNamespace(Name) THEN
	TryGetParameterByName := parameters.TryGetByName(Name,Destination);
	RETURN;
END_IF

extensionName := RemoveLastSegmentFromNamespace(Name);
parameterName := GetLastSegmentFromNamespace(Name);

IF NOT TryGetExtensionByName(extensionName, extension) THEN
	RETURN;
END_IF

TryGetParameterByName := extension.TryGetParameterByName(parameterName, Destination);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>