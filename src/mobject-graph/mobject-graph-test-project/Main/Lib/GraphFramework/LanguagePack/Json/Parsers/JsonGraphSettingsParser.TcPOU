<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonGraphSettingsParser" Id="{ebb1eb33-1a2e-0a9b-3ae0-789eca45bad7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK JsonGraphSettingsParser IMPLEMENTS I_GraphSettings
VAR
	parser : FB_JsonDomParser;
	baseJsonValue : SJsonValue;
	jsonLanguagePack : I_JsonLanguagePack;

	_nodeCount : UDINT;
	_lastNodeId : NodeId;
	_lastLinkId : T_MAXSTRING;
	
	nodeParser : JsonNodeSettingsParser(0);
	linkParser : JsonLinkSettingsParser(0);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{06f33374-f335-0a78-1dd1-a098bddcab3a}" />
    <Folder Name="Private" Id="{1ff1bc5a-a9a2-075f-05a5-7329c800e91d}" />
    <Method Name="Clear" Id="{c1ed9b0c-b925-0333-1704-d0c9017e417a}">
      <Declaration><![CDATA[METHOD PUBLIC Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[baseJsonValue := 0;
parser.NewDocument();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{dfc083b0-fcd4-0a5c-1362-5d2b13fc3723}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	JsonLanguagePack : I_JsonLanguagePack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.jsonLanguagePack := JsonLanguagePack;

nodeParser.FB_init(bInitRetains, bInCopyCode, JsonLanguagePack);
linkParser.FB_init(bInitRetains, bInCopyCode, JsonLanguagePack);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLinkById" Id="{543e5ed5-39e3-062d-2355-b16d06be2824}">
      <Declaration><![CDATA[METHOD PUBLIC GetLinkById : I_LinkSettings
VAR_INPUT
	Id : T_MAXSTRING;
END_VAR
VAR
	i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO LinkCount - 1  DO
	
	linkParser.Update(parser,GetLinkObjectByIndex(i));
	
	IF linkParser.Id = Id THEN
		GetLinkById := linkParser;
		return;
	END_IF

END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLinkByIndex" Id="{4780680b-b1f3-0e73-218d-495f2b12f8fc}">
      <Declaration><![CDATA[METHOD PUBLIC GetLinkByIndex : I_LinkSettings
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[linkParser.Update(parser,GetLinkObjectByIndex(Index));
GetLinkByIndex := linkParser;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLinkObjectByIndex" Id="{5e4ee61b-9c82-0c6c-32f4-09426b3805ff}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetLinkObjectByIndex : SJsonValue
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetLinkObjectByIndex := parser.GetArrayValueByIdx(GetLinksArray(), Index);  ]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLinksArray" Id="{706f01ad-ef56-0f66-2330-b5d774c5a44a}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetLinksArray : SJsonValue]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetLinksArray := parser.FindMember(baseJsonValue, 'links');]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNodeById" Id="{874d8fbd-4e17-0158-0215-256af4320276}">
      <Declaration><![CDATA[METHOD PUBLIC GetNodeById : I_NodeSettings
VAR_INPUT
	Id : NodeId;
END_VAR
VAR
	i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO NodeCount - 1  DO
	
	nodeParser.Update(parser,GetNodeObjectByIndex(i));
	
	IF nodeParser.Id = Id THEN
		GetNodeById := nodeParser;
		return;
	END_IF

END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNodeByIndex" Id="{d3e6eb7e-6604-0d50-02e1-7256ad50c802}">
      <Declaration><![CDATA[METHOD PUBLIC GetNodeByIndex : I_NodeSettings
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nodeParser.Update(parser,GetNodeObjectByIndex(Index));
GetNodeByIndex := nodeParser;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNodeObjectByIndex" Id="{82778c75-b362-00b8-22c9-15f9aa7c6322}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetNodeObjectByIndex : SJsonValue
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetNodeObjectByIndex := parser.GetArrayValueByIdx(GetNodesArray(),Index);  ]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNodesArray" Id="{881e9ec4-82d4-0082-1785-8ebb6db62081}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetNodesArray : SJsonValue]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetNodesArray := parser.FindMember(baseJsonValue, 'nodes');]]></ST>
      </Implementation>
    </Method>
    <Property Name="HasLinks" Id="{494d8272-5b6f-0cd6-28f8-c50238936cbd}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasLinks : Bool]]></Declaration>
      <Get Name="Get" Id="{13ca2495-45dc-0077-031b-549dc8bf38a6}">
        <Declaration><![CDATA[VAR
	tempJsonValue: SJsonValue;
END_VAR

]]></Declaration>
        <Implementation>
          <ST><![CDATA[tempJsonValue := GetLinksArray();

IF tempJsonValue = 0 OR_ELSE NOT parser.IsArray(tempJsonValue) THEN
	RETURN;	
END_IF

HasLinks := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HasNodes" Id="{efefb8a3-cccf-04b2-078c-c24de017ed31}">
      <Declaration><![CDATA[PROPERTY PUBLIC HasNodes : Bool]]></Declaration>
      <Get Name="Get" Id="{b9873311-8e33-0920-328f-0608405d59f3}">
        <Declaration><![CDATA[VAR
	tempJsonValue: SJsonValue;
END_VAR

]]></Declaration>
        <Implementation>
          <ST><![CDATA[tempJsonValue := GetNodesArray();

IF tempJsonValue = 0 OR_ELSE NOT parser.IsArray(tempJsonValue) THEN
	RETURN;	
END_IF

HasNodes := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LastLinkId" Id="{30ddea75-6d51-0dda-322b-eb49f99654da}">
      <Declaration><![CDATA[PROPERTY PUBLIC LastLinkId : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{0d2b2f69-a29b-0472-2615-9ea8c776adfe}">
        <Declaration><![CDATA[VAR
	tempJsonValue: SJsonValue;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[tempJsonValue := parser.FindMember(baseJsonValue, 'last_link_id');

IF tempJsonValue = 0 THEN
	RETURN;	
END_IF

LastLinkId := DINT_TO_STRING(parser.GetInt(tempJsonValue));]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LastNodeId" Id="{7bda32bf-2419-04dc-1007-a9ae3dcf3a38}">
      <Declaration><![CDATA[PROPERTY PUBLIC LastNodeId : NodeId]]></Declaration>
      <Get Name="Get" Id="{06fabe7e-f838-04bc-1c96-79f3bd64a7ce}">
        <Declaration><![CDATA[VAR
	tempJsonValue: SJsonValue;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[tempJsonValue := parser.FindMember(baseJsonValue, 'last_node_id');

IF tempJsonValue = 0 THEN
	RETURN;	
END_IF

LastNodeId := parser.GetInt(tempJsonValue);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LinkCount" Id="{2d62cb4b-7b55-0e09-112d-fed7252a0bc8}">
      <Declaration><![CDATA[PROPERTY PUBLIC LinkCount : UDINT]]></Declaration>
      <Get Name="Get" Id="{eb51986e-1037-02b5-3800-deeb7fcf305e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT HasLinks THEN
	LinkCount := 0;
	RETURN;
END_IF

LinkCount := parser.GetArraySize(GetLinksArray());]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="LoadFile" Id="{e6ec9504-2281-0d46-127a-1302b2bd9c84}">
      <Declaration><![CDATA[METHOD PUBLIC LoadFile : BOOL;
VAR_INPUT
	FilePath : FilePath;
END_VAR
VAR
	load : BOOL := TRUE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT parser.LoadDocumentFromFile(FilePath,load) THEN
	RETURN;
END_IF;

baseJsonValue := parser.GetDocumentRoot();

IF baseJsonValue <> 0 THEN
	LoadFile := TRUE;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NodeCount" Id="{e00a1413-a8de-0b0e-26e6-046713363104}">
      <Declaration><![CDATA[PROPERTY PUBLIC NodeCount : UDINT]]></Declaration>
      <Get Name="Get" Id="{f04920bb-7f28-0702-0074-834941db56c1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT HasNodes THEN
	NodeCount := 0;
	RETURN;
END_IF

NodeCount := parser.GetArraySize(GetNodesArray());]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReadString" Id="{b0015738-c15e-0e49-3fb7-75403a41c243}">
      <Declaration><![CDATA[METHOD PUBLIC ReadString : BOOL
VAR_INPUT
	HugeString : REFERENCE TO HugeString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[baseJsonValue := parser.ParseDocument(HugeString);
ReadString := baseJsonValue <> 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Uuid" Id="{edf2eeca-e6f1-021e-1dcb-742988d10601}">
      <Declaration><![CDATA[PROPERTY PUBLIC Uuid : Uuid]]></Declaration>
      <Get Name="Get" Id="{eea33af0-ae9d-0036-2e3c-9e9d5a76362c}">
        <Declaration><![CDATA[VAR
	uuidJsonMember: SJsonValue;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[uuidJsonMember := parser.FindMember(baseJsonValue, 'uuid');

IF uuidJsonMember = 0 THEN
	RETURN;	
END_IF

Uuid := parser.GetString(uuidJsonMember);]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>