<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CreateGraphRpcHandler" Id="{d7516374-45eb-4b62-8de2-ab2fefa44ac4}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK CreateGraphRpcHandler IMPLEMENTS I_RpcHandler
VAR
	graphFramework : I_GraphFramework;
	graphs : I_Graphs;
	lastGraphUuid : T_MAXSTRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Handle" Id="{eccafacb-820d-475e-bb11-2e1cd4050d86}">
      <Declaration><![CDATA[METHOD Handle
VAR_INPUT
	Parameters : I_Deserializer;
	Response : I_SynchronousRpcResponse;
END_VAR
VAR
	graph : I_Graph;
	feedback : DeserializerFeedback;
	graphDeserializer : I_Deserializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF graphs.TryGetGraphByUuid(lastGraphUuid,graph) THEN
	graphs.RemoveGraph(graph);
	graph.Dispose();
	lastGraphUuid := '';
END_IF

graph := graphFramework.Create();
graphDeserializer := Parameters.GetKeyObject('graph');

IF NOT graph.TryDeserializeFrom(graphDeserializer, feedback) THEN
	Response.RejectWithMessage(feedback.FirstError.Message);
	graph.Dispose();
	RETURN;
END_IF

lastGraphUuid := graph.Uuid;
graphs.AddGraph(graph);
Response.CompleteWithObject(graph);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{f8b8a465-807a-4afc-b266-9589720b46a6}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize
VAR_INPUT
	GraphFramework : I_GraphFramework;
	Graphs : I_Graphs;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.graphFramework := GraphFramework;
THIS^.graphs := Graphs;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>